import { Component, EventEmitter, Input, Output, ViewChild } from '@angular/core';
import { GridListService } from '../grid-list/grid-list.service';
import { DxDataGridComponent } from 'devextreme-angular';
import CustomStore from 'devextreme/data/custom_store';
import { exportDataGrid } from 'devextreme/excel_exporter';
import { exportDataGrid as exportDataGridToPdf } from 'devextreme/pdf_exporter';
import * as ExcelJS from 'exceljs/dist/exceljs.min.js';
import { saveAs } from 'file-saver-es';
import * as jsPDF from 'jspdf';
import * as moment from 'moment';
import * as i0 from "@angular/core";
import * as i1 from "@angular/router";
import * as i2 from "../../../@core/service/auth.service";
import * as i3 from "../../../@core/service/local.service";
import * as i4 from "devextreme-angular";
import * as i5 from "devextreme-angular/ui/nested";
import * as i6 from "@angular/common";
import * as i7 from "devextreme-angular/core";
import * as i8 from "@angular/material/tooltip";
export class GridListComponent {
    constructor(router, auth, localstorage) {
        this.router = router;
        this.auth = auth;
        this.localstorage = localstorage;
        this.dataList = [];
        this.currentPage = new EventEmitter();
        this.pageIndex = new EventEmitter();
        this.currentSize = new EventEmitter();
        this.editTableRow = new EventEmitter();
        this.viewTableRow = new EventEmitter();
        this.deleteTableRow = new EventEmitter();
        this.openExternalLink = new EventEmitter();
        this.openpopupLink = new EventEmitter();
        this.routeTo = new EventEmitter();
        this.openPopup = new EventEmitter();
        this.duplicateRow = new EventEmitter();
        this.sortOrder = new EventEmitter();
        this.filterSearchValue = new EventEmitter();
        this.filterBuilderPopup = new EventEmitter();
        this.filterPanel = new EventEmitter();
        this.multipleFilterValues = new EventEmitter();
        this.downloadTableRow = new EventEmitter();
        this.toggleRow = new EventEmitter();
        this.outComeTableRow = new EventEmitter();
        this.downloadFormResponseFiles = new EventEmitter();
        this.deleteFormResponseFiles = new EventEmitter();
        this.rowSelection = new EventEmitter();
        this.navigate = new EventEmitter();
        this.multipleFilterValueToAPI = new EventEmitter();
        this.selectedRowsData = new EventEmitter();
        this.contentReady = e => {
            const reorderColumns = e.component.instance().getVisibleColumns();
            console.log(reorderColumns, 'reorderColumns');
        };
        /**
         * initiating the grid list
         */
        this.loadGWithParam();
        /**
         * fetching login details from local storage
         */
        this.user = this.localstorage.getObj('user');
        this.displayMode = 'compact';
        this.currentFilter = 'auto';
    }
    set pageSize(value) {
        if (value) {
            this.currentPageSize = value;
        }
        else {
            this.currentPageSize = 20;
        }
    }
    ngOnInit() {
        this.rUrl = this.router.url.split('/');
        this.tempColumns = this.columns;
        if (this.columns && this.columns.gridConfigFormArray) {
            this.columnHeader = this.columns.gridConfigFormArray.map(column => column.header);
            this.columns = this.columns.gridConfigFormArray;
        }
        else {
            this.columnHeader = this.columns.map(column => column.header);
        }
        this.popupPosition = { of: window, at: 'top', my: 'top', offset: { y: 10 } };
        this.filterValue = [];
        this.customOperations = [];
    }
    /**
     * re-render the grid when input data is changed.
     */
    ngOnChanges() {
        this.loadGWithParam();
    }
    /**
     * Rendering data grid condition wise that login user is admin or not
     */
    loadGWithParam() {
        if (!this.auth.isAdmin()) {
            this.loadGrid({ value: !this.Organization ? this.auth.getOrgID() : this.Organization }, false);
        }
        else {
            this.loadGrid({ value: this.Organization ? this.Organization : 'Select-ALL' }, false);
        }
    }
    ngAfterViewInit() {
        /**
         * Datagrid even listener we can customize column event
         */
        this.dataGrid.onRowClick.subscribe(row => {
            this.selectedRowsData.emit(row);
        });
        this.dataGrid.onOptionChanged.subscribe(e => {
            if (e.name === 'columns' && e.fullName.endsWith('filterValues')) {
                const colIndex = Number(e.fullName
                    .match(/\[\d+\]/)[0]
                    .replace('[', '')
                    .replace(']', ''));
                e.component.columnOption(colIndex, 'filterValues');
                this.multipleFilterValues.emit(e);
            }
            // Search
            if (e.name === 'columns' && e.fullName.endsWith('filterValue')) {
                console.log(e);
                this.filterSearchValue.emit(e);
            }
            // filter Builder Popup
            if (e.name === 'filterBuilderPopup') {
                console.log('filterBuilderPopup');
                console.log(e);
                this.filterBuilderPopup.emit(e);
            }
            // filter Panel - enable or disable
            if (e.name === 'filterPanel') {
                console.log(e.value);
                this.filterPanel.emit(e);
            }
            // Sorting
            if (e.name === 'columns' && e.fullName.endsWith('sortOrder')) {
                this.sortOrder.emit(e);
            }
            // Paging
            if (e.name === 'paging') {
                this.currentPage.emit(e.value);
            }
            // pageIndex
            if (e.fullName === 'paging.pageIndex') {
                this.pageIndex.emit(e.value);
            }
            // pageSize
            if (e.fullName === 'paging.pageSize') {
                this.currentSize.emit(e.value);
            }
        });
    }
    /**
     * Generating data grid and restructuring data for Developer grid
     * @param orgID origination details
     * @param load optional boolean is for checking data should load organization respective or all
     */
    loadGrid(orgID, load = true) {
        var _a;
        this.Organization = orgID.value;
        if (load) {
            this.currentPage.emit(orgID.value === 'Select-ALL' ? 'all' : orgID.value);
        }
        if (((_a = this.dataList) === null || _a === void 0 ? void 0 : _a.length) && this.rUrl && this.rUrl[2] === 'view-dashboard') {
            this.dUrl = 'view-dashboard/dashboard';
            this.router.navigateByUrl(`pages/${this.dUrl}/${this.dataList[0]['id']}`);
        }
        this.customStore = new CustomStore({
            load: _opts => {
                this.multipleFilterValueToAPI.emit(_opts.filter);
                return Promise.resolve(this.dataList);
            },
            totalCount: _opts => {
                return Promise.resolve(this.totalCount);
            }
        });
    }
    getRouter(data) {
        this.routeTo.emit(data);
    }
    navigateTo(data) {
        this.navigate.emit(data);
    }
    popup(data) {
        this.openPopup.emit(data);
    }
    downloadData(evt) {
        this.downloadTableRow.emit(evt);
    }
    editData(evt) {
        this.editTableRow.emit(evt);
    }
    editDataMyApplciation(evt) {
        this.editTableRow.emit(evt);
    }
    editAppeal(evt) {
        this.editTableRow.emit(evt);
    }
    onSelectionChanged(evt) {
        this.rowSelection.emit(evt);
    }
    viewData(evt) {
        this.viewTableRow.emit(evt);
    }
    deleteData(evt) {
        this.deleteTableRow.emit(evt);
    }
    duplicateDate(evt) {
        this.duplicateRow.emit(evt);
    }
    openLink(evt) {
        this.openExternalLink.emit(evt);
    }
    openPopupLink(evt) {
        this.openpopupLink.emit(evt);
    }
    activeUser(evt) {
        this.toggleRow.emit(evt);
    }
    getVisabilityByChoosableProp(chooser, visible) {
        if (chooser) {
            return visible;
        }
        else {
            return true;
        }
    }
    getSortOrder(defaultSortColumn, defaultSortType, columnDef) {
        if (defaultSortColumn && defaultSortType) {
            return defaultSortColumn === columnDef ? defaultSortType : '';
        }
        return '';
    }
    outComeData(evt) {
        this.outComeTableRow.emit(evt);
    }
    downloadFormResponseAttachments(evt) {
        this.downloadFormResponseFiles.emit(evt);
    }
    deleteFormResponseAttachments(evt) {
        this.deleteFormResponseFiles.emit(evt);
    }
    onRowPrepared(e) {
        if (e.rowType == 'data' && e.data.isnew) {
            const element = e.rowElement;
            element.classList.add('isnew');
        }
    }
    onCellPrepared(e) {
        var _a, _b;
        if (e.rowType == 'data') {
            if (e.column.dataField === 'notice') {
                const element = e.cellElement;
                e.cellElement.innerHTML = '';
                const livetext = document.createElement('div');
                this.checkOncellprepare(e, livetext);
                element.appendChild(livetext);
            }
            else if (e.column.dataField === 'notificationEventChannels') {
                const element = e.cellElement;
                e.cellElement.innerHTML = '';
                const livetext = document.createElement('div');
                let ele = '';
                e.data.notificationEventChannels.map(t => {
                    if (t.templatename) {
                        ele += `<label>${t.templatename}&nbsp;(<b>${t.templatechannel}</b>)</label>,`;
                    }
                });
                livetext.innerHTML = ele;
                element.appendChild(livetext);
            }
            else if (e.column.dataField === 'link') {
                const element = e.cellElement;
                e.cellElement.innerHTML = '';
                const livetext = document.createElement('div');
                livetext.innerHTML = `<img  src="${e.data.link ? (_b = (_a = e.data) === null || _a === void 0 ? void 0 : _a.link) === null || _b === void 0 ? void 0 : _b.split('?')[0] : ''}"style="max-width: 45px; cursor: pointer"/>`;
                element.appendChild(livetext);
            }
            this.checkCellprepare(e);
        }
    }
    checkCellprepare(e) {
        var _a, _b, _c, _d;
        if (e.column.dataField === 'status' && e.data['tabname'] === 'RECORDS' && e.data['status'] === 'NO MATCH') {
            const element = e.cellElement;
            const livetext = document.createElement('span');
            livetext.classList.add('ml-2');
            livetext.innerHTML = `<em class="fa fa-info-circle" aria-hidden="true" title="${(_b = (_a = e.data) === null || _a === void 0 ? void 0 : _a.execution_error) === null || _b === void 0 ? void 0 : _b.error}" ></em>`;
            if ((_d = (_c = e.data) === null || _c === void 0 ? void 0 : _c.execution_error) === null || _d === void 0 ? void 0 : _d.error) {
                element.appendChild(livetext);
            }
        }
    }
    checkOncellprepare(e, livetext) {
        if (e.value !== 'No Data Found') {
            livetext.innerHTML = `<a class="btn-link loginLabel" href="${e.value}" target="_blank">Click Here<a>`;
        }
        else {
            livetext.innerHTML = 'No Data Found';
        }
    }
    onExporting(e) {
        const pageName = this.localstorage.getObj('FILE EXPORT NAME');
        const currentDate = moment().format('YYYY-MM-DD');
        let fileName;
        if (pageName) {
            fileName = `${pageName} Versions ${currentDate}`;
        }
        else if (this.exportPageName) {
            fileName = `${this.exportPageName}-${currentDate}`;
        }
        else {
            fileName = `Dynamic-Pages ${currentDate}`;
        }
        if (e.format === 'pdf') {
            const doc = new jsPDF.jsPDF();
            exportDataGridToPdf({
                jsPDFDocument: doc,
                component: e.component
            }).then(() => {
                doc.save(`${fileName}.pdf`);
            });
        }
        else if (e.format === 'xlsx') {
            e.fileName = fileName;
        }
        else if (e.format === 'csv') {
            const workbook = new ExcelJS.Workbook();
            const worksheet = workbook.addWorksheet('Main sheet');
            exportDataGrid({
                component: e.component,
                worksheet: worksheet
            }).then(function () {
                workbook.csv.writeBuffer().then(function (buffer) {
                    saveAs(new Blob([buffer], { type: 'application/octet-stream' }), `${fileName}.csv`);
                });
            });
            e.cancel = true;
        }
    }
    customizeHeaderFilterData(options) {
        options.dataSource.postProcess = results => {
            results.map(x => {
                x.text = x[options.dataSource.group[0].selector];
                x.value = [options.dataSource.group[0].selector, '=', x[options.dataSource.group[0].selector]];
                return x;
            });
            console.log(results, 'update customizeHeaderFilterData');
            return results;
        };
    }
}
GridListComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: GridListComponent, deps: [{ token: i1.Router }, { token: i2.AuthService }, { token: i3.LocalService }], target: i0.ɵɵFactoryTarget.Component });
GridListComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.17", type: GridListComponent, selector: "app-grid-list", inputs: { dataList: "dataList", dataSource: "dataSource", columns: "columns", updateGrid: "updateGrid", totalCount: "totalCount", page: "page", isShow: "isShow", remoteOperations: "remoteOperations", enableExport: "enableExport", showHeaderFilter: "showHeaderFilter", exportPageName: "exportPageName", pageSize: "pageSize" }, outputs: { currentPage: "currentPage", pageIndex: "pageIndex", currentSize: "currentSize", editTableRow: "editTableRow", viewTableRow: "viewTableRow", deleteTableRow: "deleteTableRow", openExternalLink: "openExternalLink", openpopupLink: "openpopupLink", routeTo: "routeTo", openPopup: "openPopup", duplicateRow: "duplicateRow", sortOrder: "sortOrder", filterSearchValue: "filterSearchValue", filterBuilderPopup: "filterBuilderPopup", filterPanel: "filterPanel", multipleFilterValues: "multipleFilterValues", downloadTableRow: "downloadTableRow", toggleRow: "toggleRow", outComeTableRow: "outComeTableRow", downloadFormResponseFiles: "downloadFormResponseFiles", deleteFormResponseFiles: "deleteFormResponseFiles", rowSelection: "rowSelection", navigate: "navigate", multipleFilterValueToAPI: "multipleFilterValueToAPI", selectedRowsData: "selectedRowsData" }, providers: [GridListService], viewQueries: [{ propertyName: "dataGrid", first: true, predicate: DxDataGridComponent, descendants: true }], usesOnChanges: true, ngImport: i0, template: "<dx-data-grid\r\n  id=\"gridContainer\"\r\n  [dataSource]=\"customStore\"\r\n  [allowColumnReordering]=\"true\"\r\n  [allowColumnResizing]=\"true\"\r\n  [columnAutoWidth]=\"true\"\r\n  [showBorders]=\"true\"\r\n  [rowAlternationEnabled]=\"updateGrid?.rowSelection ? false : true\"\r\n  [showColumnLines]=\"true\"\r\n  [showRowLines]=\"true\"\r\n  [filterValue]=\"filterValue\"\r\n  [remoteOperations]=\"remoteOperations ? remoteOperations : false\"\r\n  [hoverStateEnabled]=\"updateGrid?.rowSelection\"\r\n  (onSelectionChanged)=\"onSelectionChanged($event)\"\r\n  (onRowPrepared)=\"onRowPrepared($event)\"\r\n  (onCellPrepared)=\"onCellPrepared($event)\"\r\n  (onContentReady)=\"contentReady($event)\"\r\n  (onExporting)=\"onExporting($event)\">\r\n  <dxo-load-panel [enabled]=\"false\"></dxo-load-panel>\r\n  <dxo-filter-panel [visible]=\"false\"></dxo-filter-panel>\r\n  <dxo-paging [pageSize]=\"currentPageSize\"></dxo-paging>\r\n  <dxo-pager\r\n    [visible]=\"true\"\r\n    [allowedPageSizes]=\"[10, 25, 50, 100]\"\r\n    [displayMode]=\"displayMode\"\r\n    [showPageSizeSelector]=\"true\"\r\n    [showInfo]=\"true\"\r\n    [showNavigationButtons]=\"true\"></dxo-pager>\r\n  <!--end pagination-->\r\n\r\n  <dxo-export [enabled]=\"enableExport\" [formats]=\"['xlsx', 'csv']\"></dxo-export>\r\n\r\n  <dxo-filter-builder [customOperations]=\"customOperations\"> </dxo-filter-builder>\r\n  <dxo-filter-builder-popup [position]=\"popupPosition\"> </dxo-filter-builder-popup>\r\n\r\n  <dxo-filter-row [visible]=\"showHeaderFilter\" [applyFilter]=\"currentFilter\"></dxo-filter-row>\r\n  <dxo-header-filter [visible]=\"true\" [allowSearch]=\"false\"></dxo-header-filter>\r\n  <dxo-selection mode=\"single\" *ngIf=\"updateGrid?.rowSelection\"></dxo-selection>\r\n  <ng-container *ngFor=\"let column of columns; let i = index\">\r\n    <ng-container *ngIf=\"column?.hide !== true\">\r\n      <ng-container *ngIf=\"column?.link; else noLink\">\r\n        <dxi-column\r\n          [visible]=\"getVisabilityByChoosableProp(updateGrid?.chooser, column?.visible)\"\r\n          [allowHiding]=\"!column?.Choosable\"\r\n          [fixed]=\"column?.fixed\"\r\n          [dataField]=\"column?.columnDef\"\r\n          [filterOperations]=\"column?.filterOperations ? column?.filterOperations : ''\"\r\n          [caption]=\"column?.header\"\r\n          [allowFiltering]=\"column?.filter\"\r\n          cellTemplate=\"cellTemplate\"\r\n          [allowSorting]=\"column?.sort\"\r\n          [sortOrder]=\"getSortOrder(updateGrid?.defaultSortColumn, updateGrid?.defaultSortType, column?.columnDef)\">\r\n          <dxo-header-filter [dataSource]=\"customizeHeaderFilterData\"></dxo-header-filter>\r\n        </dxi-column>\r\n      </ng-container>\r\n      <ng-template #noLink>\r\n        <ng-container *ngIf=\"column?.icon; else noIcon\">\r\n          <dxi-column\r\n            [visible]=\"getVisabilityByChoosableProp(updateGrid?.chooser, column?.visible)\"\r\n            [allowHiding]=\"!column?.Choosable\"\r\n            [fixed]=\"column?.fixed\"\r\n            [dataField]=\"column?.columnDef\"\r\n            [caption]=\"column?.header\"\r\n            [allowFiltering]=\"column?.filter\"\r\n            [filterOperations]=\"column?.filterOperations ? column?.filterOperations : ''\"\r\n            cellTemplate=\"iconTemplate\"\r\n            [allowSorting]=\"column?.sort\"\r\n            [sortOrder]=\"getSortOrder(updateGrid?.defaultSortColumn, updateGrid?.defaultSortType, column?.columnDef)\">\r\n            <dxo-header-filter [dataSource]=\"customizeHeaderFilterData\"></dxo-header-filter>\r\n          </dxi-column>\r\n        </ng-container>\r\n      </ng-template>\r\n      <ng-template #noIcon>\r\n        <ng-container *ngIf=\"column?.dateFormat; else noDate\">\r\n          <dxi-column\r\n            [visible]=\"getVisabilityByChoosableProp(updateGrid?.chooser, column?.visible)\"\r\n            [allowHiding]=\"!column?.Choosable\"\r\n            [fixed]=\"column?.fixed\"\r\n            *ngIf=\"column?.datetext === 'MMDD24'\"\r\n            [dataField]=\"column?.columnDef\"\r\n            [caption]=\"column?.header\"\r\n            [allowFiltering]=\"column?.filter\"\r\n            [filterOperations]=\"column?.filterOperations ? column?.filterOperations : ''\"\r\n            dataType=\"date\"\r\n            format=\"MM/dd/yyyy, HH:mm\"\r\n            [allowSorting]=\"column?.sort\"\r\n            [sortOrder]=\"getSortOrder(updateGrid?.defaultSortColumn, updateGrid?.defaultSortType, column?.columnDef)\">\r\n            <dxo-header-filter [dataSource]=\"customizeHeaderFilterData\"></dxo-header-filter>\r\n          </dxi-column>\r\n          <dxi-column\r\n            [visible]=\"getVisabilityByChoosableProp(updateGrid?.chooser, column?.visible)\"\r\n            [allowHiding]=\"!column?.Choosable\"\r\n            [fixed]=\"column?.fixed\"\r\n            *ngIf=\"column?.datetext === 'MDY'\"\r\n            [filterOperations]=\"column?.filterOperations ? column?.filterOperations : ''\"\r\n            [dataField]=\"column?.columnDef\"\r\n            [caption]=\"column?.header\"\r\n            [allowFiltering]=\"column?.filter\"\r\n            dataType=\"date\"\r\n            format=\"MM/dd/yyyy\"\r\n            [allowSorting]=\"column?.sort\"\r\n            [sortOrder]=\"getSortOrder(updateGrid?.defaultSortColumn, updateGrid?.defaultSortType, column?.columnDef)\">\r\n            <dxo-header-filter [dataSource]=\"customizeHeaderFilterData\"></dxo-header-filter>\r\n          </dxi-column>\r\n          <dxi-column\r\n            [visible]=\"getVisabilityByChoosableProp(updateGrid?.chooser, column?.visible)\"\r\n            [allowHiding]=\"!column?.Choosable\"\r\n            [fixed]=\"column?.fixed\"\r\n            *ngIf=\"column?.datetext !== 'MDY' && column?.datetext !== 'MMDD24'\"\r\n            [dataField]=\"column?.columnDef\"\r\n            [filterOperations]=\"column?.filterOperations ? column?.filterOperations : ''\"\r\n            [caption]=\"column?.header\"\r\n            [allowFiltering]=\"column?.filter\"\r\n            dataType=\"date\"\r\n            [format]=\"column?.removeTime ? 'MM/dd/yyyy' : 'MM/dd/yyyy, hh:mm a'\"\r\n            [allowSorting]=\"column?.sort\"\r\n            [sortOrder]=\"getSortOrder(updateGrid?.defaultSortColumn, updateGrid?.defaultSortType, column?.columnDef)\">\r\n            <dxo-header-filter [dataSource]=\"customizeHeaderFilterData\"></dxo-header-filter>\r\n          </dxi-column>\r\n        </ng-container>\r\n      </ng-template>\r\n      <ng-template #noDate>\r\n        <dxi-column\r\n          [dataField]=\"column.columnDef\"\r\n          [caption]=\"column.header\"\r\n          [filterOperations]=\"column?.filterOperations ? column?.filterOperations : ''\"\r\n          [allowFiltering]=\"column.filter\">\r\n          <dxo-header-filter [dataSource]=\"customizeHeaderFilterData\"></dxo-header-filter>\r\n        </dxi-column>\r\n        <ng-container *ngIf=\"column?.header.toLowerCase().trim() === 'status';\">\r\n          <dxi-column\r\n            [visible]=\"getVisabilityByChoosableProp(updateGrid?.chooser, column?.visible)\"\r\n            [allowHiding]=\"!column?.Choosable\"\r\n            [fixed]=\"column?.fixed\"\r\n            [dataField]=\"column?.columnDef\"\r\n            [filterOperations]=\"column?.filterOperations ? column?.filterOperations : ''\"\r\n            [caption]=\"column?.header\"\r\n            [allowFiltering]=\"column?.filter\"\r\n            cellTemplate=\"statusTemplate\"\r\n            [allowSorting]=\"column?.sort\"\r\n            [sortOrder]=\"getSortOrder(updateGrid?.defaultSortColumn, updateGrid?.defaultSortType, column?.columnDef)\">\r\n            <dxo-header-filter [dataSource]=\"customizeHeaderFilterData\"></dxo-header-filter>\r\n          </dxi-column>\r\n        </ng-container>\r\n      </ng-template>\r\n    </ng-container>\r\n  </ng-container>\r\n  <ng-container\r\n    *ngIf=\"\r\n      updateGrid &&\r\n      (updateGrid?.externalLink ||\r\n        updateGrid?.openPopup ||\r\n        updateGrid?.edit ||\r\n        updateGrid?.editMyApplication ||\r\n        updateGrid?.editAppeal ||\r\n        updateGrid?.editBilling ||\r\n        updateGrid?.delete ||\r\n        updateGrid?.delete ||\r\n        updateGrid?.download ||\r\n        updateGrid?.showDownload ||\r\n        updateGrid?.showDelete ||\r\n        updateGrid?.pdf)\r\n    \">\r\n    <dxi-column\r\n      [width]=\"100\"\r\n      [allowFiltering]=\"false\"\r\n      [allowSorting]=\"false\"\r\n      caption=\"Action\"\r\n      cellTemplate=\"editCellTemplate\"></dxi-column>\r\n    <!-- Action label added for admin grid -->\r\n\r\n    <div *dxTemplate=\"let d of 'editCellTemplate'\">\r\n      <a\r\n        href=\"javascript:void(0)\"\r\n        *ngIf=\"updateGrid?.externalLink\"\r\n        class=\"no-bg\"\r\n        matTooltip=\"Open\"\r\n        (click)=\"openLink(d)\">\r\n        <em class=\"fa fa-external-link\" aria-hidden=\"true\"></em>\r\n      </a>\r\n      <a\r\n        href=\"javascript:void(0)\"\r\n        title=\"Appeal\"\r\n        *ngIf=\"updateGrid?.appeal\"\r\n        class=\"no-bg\"\r\n        matTooltip=\"Appeal\"\r\n        (click)=\"navigateTo(d)\">\r\n        <em class=\"fa fa-external-link\" aria-hidden=\"true\"></em>\r\n      </a>\r\n      <a\r\n        href=\"javascript:void(0)\"\r\n        *ngIf=\"updateGrid?.showDownload && !updateGrid?.isNewlyUploaded\"\r\n        class=\"no-bg\"\r\n        matTooltip=\"Download File\"\r\n        (click)=\"downloadFormResponseAttachments(d)\">\r\n        <em class=\"fa fa-download\" aria-hidden=\"true\"></em> </a\r\n      >&nbsp;&nbsp;\r\n      <a\r\n        href=\"javascript:void(0)\"\r\n        *ngIf=\"updateGrid?.showDelete\"\r\n        class=\"no-bg text-danger\"\r\n        matTooltip=\"Delete File\"\r\n        (click)=\"deleteFormResponseAttachments(d)\">\r\n        <em class=\"fa fa-trash\" aria-hidden=\"true\"></em>\r\n      </a>\r\n      <a\r\n        href=\"javascript:void(0)\"\r\n        *ngIf=\"updateGrid?.openPopup\"\r\n        class=\"no-bg\"\r\n        matTooltip=\"Open\"\r\n        (click)=\"openPopupLink(d)\">\r\n        <em class=\"fa fa-newspaper-o\" aria-hidden=\"true\"></em>\r\n      </a>\r\n      <a\r\n        href=\"javascript:void(0)\"\r\n        *ngIf=\"updateGrid?.duplicate\"\r\n        class=\"no-bg mr-2\"\r\n        matTooltip=\"Copy\"\r\n        (click)=\"duplicateDate(d)\">\r\n        <em class=\"fa fa-copy\" aria-hidden=\"true\" fieldKey=\"PAG_DES_GRID_LIST_COPY\"\r\n          ><span class=\"sr-only\">Copy</span></em\r\n        >\r\n      </a>\r\n      <a\r\n        href=\"javascript:void(0)\"\r\n        *ngIf=\"updateGrid?.download\"\r\n        class=\"no-bg\"\r\n        matTooltip=\"Download\"\r\n        (click)=\"downloadData(d)\">\r\n        <em class=\"fa fa-download\" aria-hidden=\"true\"></em>\r\n      </a>\r\n      <a\r\n        href=\"javascript:void(0)\"\r\n        title=\"Edit\"\r\n        *ngIf=\"updateGrid?.edit && !d.data?.extendedProps?.outcome\"\r\n        class=\"no-bg mr-2\"\r\n        matTooltip=\"Edit\"\r\n        (click)=\"editData(d)\">\r\n        <em class=\"fa fa-pencil\" title=\"Edit\" aria-hidden=\"true\" style=\"font-size: 13px\"></em>\r\n      </a>\r\n      <a\r\n        href=\"javascript:void(0)\"\r\n        title=\"Edit\"\r\n        *ngIf=\"updateGrid?.editMyApplication && d?.data?.application_status === 'In Progress'\"\r\n        class=\"no-bg mr-2\"\r\n        matTooltip=\"Edit\"\r\n        (click)=\"editDataMyApplciation(d)\">\r\n        <em class=\"fa fa-pencil\" title=\"Edit\" aria-hidden=\"true\" style=\"font-size: 13px\"></em>\r\n      </a>\r\n      <a\r\n        href=\"javascript:void(0)\"\r\n        title=\"Edit\"\r\n        *ngIf=\"updateGrid?.editAppeal && d?.data?.status === 'In Progress'\"\r\n        class=\"no-bg mr-2\"\r\n        matTooltip=\"Edit\"\r\n        (click)=\"editAppeal(d)\">\r\n        <em class=\"fa fa-pencil\" title=\"Edit\" aria-hidden=\"true\" style=\"font-size: 13px\"></em>\r\n      </a>\r\n      <a\r\n        href=\"javascript:void(0)\"\r\n        title=\"Edit\"\r\n        *ngIf=\"updateGrid?.editBilling && d?.data?.status === 'Waiting for approval'\"\r\n        class=\"no-bg mr-2\"\r\n        matTooltip=\"Edit\"\r\n        (click)=\"editAppeal(d)\">\r\n        <em class=\"fa fa-pencil\" title=\"Edit\" aria-hidden=\"true\" style=\"font-size: 13px\"></em>\r\n      </a>\r\n      <a\r\n        href=\"javascript:void(0)\"\r\n        title=\"View\"\r\n        *ngIf=\"updateGrid?.view\"\r\n        class=\"no-bg mr-2\"\r\n        matTooltip=\"View\"\r\n        (click)=\"viewData(d)\">\r\n        <em class=\"fa fa-eye\" title=\"View\" aria-hidden=\"true\"></em>\r\n      </a>\r\n      <a\r\n        href=\"javascript:void(0)\"\r\n        title=\"delete\"\r\n        *ngIf=\"updateGrid?.delete\"\r\n        class=\"no-bg text-danger\"\r\n        matTooltip=\"Delete\"\r\n        (click)=\"deleteData(d)\">\r\n        <em class=\"fa fa-trash\" aria-hidden=\"true\"></em>\r\n      </a>\r\n      <a\r\n        href=\"javascript:void(0)\"\r\n        *ngIf=\"updateGrid?.outcome && d.data?.extendedProps?.outcome\"\r\n        class=\"no-bg\"\r\n        matTooltip=\"View\"\r\n        (click)=\"outComeData(d)\">\r\n        <em class=\"fa fa-eye\" title=\"View\" aria-hidden=\"true\"></em>\r\n      </a>\r\n      <a href=\"javascript:void(0)\" title=\"pdf\" *ngIf=\"updateGrid?.pdf\" class=\"no-bg\" matTooltip=\"PDF\">\r\n        <em class=\"fa fa-file-pdf-o\" aria-hidden=\"true\"></em>\r\n      </a>\r\n      <button\r\n        *ngIf=\"updateGrid?.toggle\"\r\n        class=\"no-bg\"\r\n        [matTooltip]=\"d.data.isactive === true ? 'Deactivate' : 'Activate'\"\r\n        (click)=\"activeUser(d)\">\r\n        <em *ngIf=\"updateGrid?.toggle && d.data.isactive === true\" class=\"fa fa-toggle-on\"></em>\r\n        <em *ngIf=\"updateGrid?.toggle && d.data.isactive === false\" class=\"fa fa-toggle-off\"></em>\r\n      </button>\r\n      <button *ngIf=\"updateGrid?.activeordeactive\" class=\"no-bg\" (click)=\"deleteData(d)\">\r\n        <em *ngIf=\"updateGrid?.activeordeactive && d.data.activeflag === 1\" class=\"fa fa-toggle-on\"></em>\r\n        <em *ngIf=\"updateGrid?.activeordeactive && d.data.activeflag === 0\" class=\"fa fa-toggle-off\"></em>\r\n      </button>\r\n    </div>\r\n  </ng-container>\r\n  <div *dxTemplate=\"let d of 'cellTemplate'\">\r\n    <a href=\"javascript:void(0)\" *ngIf=\"d.value && d.value !== 'null'\" (click)=\"getRouter(d)\">{{\r\n      d.value !== 'null' ? d.value : ''\r\n    }}</a>\r\n  </div>\r\n  <div *dxTemplate=\"let d of 'iconTemplate'\">\r\n    <em class=\"fa fa-book\" (click)=\"popup(d.value)\" aria-hidden=\"true\"></em>\r\n  </div>\r\n</dx-data-grid>\r\n<!-- <ng-template #callNarrativePopup>\r\n  <h2 matDialogTitle>Narrative</h2>\r\n  <div [innerHTML]=\"narrativeData\"></div>\r\n  <div class=\"text-right\">\r\n    <button mat-button (click)=\"closeNarrativePopup()\" class=\"btn btn-cancel mr-2\">Close</button>\r\n  </div>\r\n</ng-template> -->\r\n", styles: [".split-page{outline:3px;margin:5px}.searchlist{min-width:620px!important;height:280px!important}.searchlist table,.searchlist table tr th,.searchlist table tr td{padding:0}.dx-datagrid .dx-data-row>td.bullet{padding-top:0;padding-bottom:0}.dx-datagrid .dx-row>tr>td{padding:0!important}.dx-datagrid .dx-row>td{padding:1px 5px!important;vertical-align:middle!important;text-align:center!important}.org-title{margin:0;font-size:12px!important;color:#0079fe}:host ::ng-deep .dx-row.dx-data-row.dx-row-lines.dx-column-lines.isnew{background-color:#f2f2f2}:host ::ng-deep .dx-row.dx-data-row.dx-row-lines.dx-column-lines.isnew td{font-weight:bold}\n"], components: [{ type: i4.DxDataGridComponent, selector: "dx-data-grid", inputs: ["accessKey", "activeStateEnabled", "allowColumnReordering", "allowColumnResizing", "autoNavigateToFocusedRow", "cacheEnabled", "cellHintEnabled", "columnAutoWidth", "columnChooser", "columnFixing", "columnHidingEnabled", "columnMinWidth", "columnResizingMode", "columns", "columnWidth", "customizeColumns", "customizeExportData", "dataRowTemplate", "dataSource", "dateSerializationFormat", "disabled", "editing", "elementAttr", "errorRowEnabled", "export", "filterBuilder", "filterBuilderPopup", "filterPanel", "filterRow", "filterSyncEnabled", "filterValue", "focusedColumnIndex", "focusedRowEnabled", "focusedRowIndex", "focusedRowKey", "focusStateEnabled", "grouping", "groupPanel", "headerFilter", "height", "highlightChanges", "hint", "hoverStateEnabled", "keyboardNavigation", "keyExpr", "loadPanel", "masterDetail", "noDataText", "pager", "paging", "remoteOperations", "renderAsync", "repaintChangesOnly", "rowAlternationEnabled", "rowDragging", "rowTemplate", "rtlEnabled", "scrolling", "searchPanel", "selectedRowKeys", "selection", "selectionFilter", "showBorders", "showColumnHeaders", "showColumnLines", "showRowLines", "sortByGroupSummaryInfo", "sorting", "stateStoring", "summary", "tabIndex", "toolbar", "twoWayBindingEnabled", "visible", "width", "wordWrapEnabled"], outputs: ["onAdaptiveDetailRowPreparing", "onCellClick", "onCellDblClick", "onCellHoverChanged", "onCellPrepared", "onContentReady", "onContextMenuPreparing", "onDataErrorOccurred", "onDisposing", "onEditCanceled", "onEditCanceling", "onEditingStart", "onEditorPrepared", "onEditorPreparing", "onExported", "onExporting", "onFileSaving", "onFocusedCellChanged", "onFocusedCellChanging", "onFocusedRowChanged", "onFocusedRowChanging", "onInitialized", "onInitNewRow", "onKeyDown", "onOptionChanged", "onRowClick", "onRowCollapsed", "onRowCollapsing", "onRowDblClick", "onRowExpanded", "onRowExpanding", "onRowInserted", "onRowInserting", "onRowPrepared", "onRowRemoved", "onRowRemoving", "onRowUpdated", "onRowUpdating", "onRowValidating", "onSaved", "onSaving", "onSelectionChanged", "onToolbarPreparing", "accessKeyChange", "activeStateEnabledChange", "allowColumnReorderingChange", "allowColumnResizingChange", "autoNavigateToFocusedRowChange", "cacheEnabledChange", "cellHintEnabledChange", "columnAutoWidthChange", "columnChooserChange", "columnFixingChange", "columnHidingEnabledChange", "columnMinWidthChange", "columnResizingModeChange", "columnsChange", "columnWidthChange", "customizeColumnsChange", "customizeExportDataChange", "dataRowTemplateChange", "dataSourceChange", "dateSerializationFormatChange", "disabledChange", "editingChange", "elementAttrChange", "errorRowEnabledChange", "exportChange", "filterBuilderChange", "filterBuilderPopupChange", "filterPanelChange", "filterRowChange", "filterSyncEnabledChange", "filterValueChange", "focusedColumnIndexChange", "focusedRowEnabledChange", "focusedRowIndexChange", "focusedRowKeyChange", "focusStateEnabledChange", "groupingChange", "groupPanelChange", "headerFilterChange", "heightChange", "highlightChangesChange", "hintChange", "hoverStateEnabledChange", "keyboardNavigationChange", "keyExprChange", "loadPanelChange", "masterDetailChange", "noDataTextChange", "pagerChange", "pagingChange", "remoteOperationsChange", "renderAsyncChange", "repaintChangesOnlyChange", "rowAlternationEnabledChange", "rowDraggingChange", "rowTemplateChange", "rtlEnabledChange", "scrollingChange", "searchPanelChange", "selectedRowKeysChange", "selectionChange", "selectionFilterChange", "showBordersChange", "showColumnHeadersChange", "showColumnLinesChange", "showRowLinesChange", "sortByGroupSummaryInfoChange", "sortingChange", "stateStoringChange", "summaryChange", "tabIndexChange", "toolbarChange", "twoWayBindingEnabledChange", "visibleChange", "widthChange", "wordWrapEnabledChange"] }, { type: i5.DxoLoadPanelComponent, selector: "dxo-load-panel", inputs: ["enabled", "height", "indicatorSrc", "shading", "shadingColor", "showIndicator", "showPane", "text", "width"] }, { type: i5.DxoFilterPanelComponent, selector: "dxo-filter-panel", inputs: ["customizeText", "filterEnabled", "texts", "visible"], outputs: ["filterEnabledChange"] }, { type: i5.DxoPagingComponent, selector: "dxo-paging", inputs: ["enabled", "pageIndex", "pageSize"], outputs: ["pageIndexChange", "pageSizeChange"] }, { type: i5.DxoPagerComponent, selector: "dxo-pager", inputs: ["allowedPageSizes", "displayMode", "infoText", "showInfo", "showNavigationButtons", "showPageSizeSelector", "visible"] }, { type: i5.DxoExportComponent, selector: "dxo-export", inputs: ["backgroundColor", "enabled", "fileName", "formats", "margin", "printingEnabled", "proxyUrl", "svgToCanvas", "allowExportSelectedData", "customizeExcelCell", "excelFilterEnabled", "excelWrapTextEnabled", "ignoreExcelErrors", "texts"] }, { type: i5.DxoFilterBuilderComponent, selector: "dxo-filter-builder", inputs: ["accessKey", "activeStateEnabled", "allowHierarchicalFields", "customOperations", "disabled", "elementAttr", "fields", "filterOperationDescriptions", "focusStateEnabled", "groupOperationDescriptions", "groupOperations", "height", "hint", "hoverStateEnabled", "maxGroupLevel", "onContentReady", "onDisposing", "onEditorPrepared", "onEditorPreparing", "onInitialized", "onOptionChanged", "onValueChanged", "rtlEnabled", "tabIndex", "value", "visible", "width"], outputs: ["valueChange"] }, { type: i5.DxoFilterBuilderPopupComponent, selector: "dxo-filter-builder-popup", inputs: ["accessKey", "animation", "closeOnOutsideClick", "container", "contentTemplate", "copyRootClassesToWrapper", "deferRendering", "disabled", "dragAndResizeArea", "dragEnabled", "dragOutsideBoundary", "elementAttr", "focusStateEnabled", "fullScreen", "height", "hideOnOutsideClick", "hideOnParentScroll", "hint", "hoverStateEnabled", "maxHeight", "maxWidth", "minHeight", "minWidth", "onContentReady", "onDisposing", "onHidden", "onHiding", "onInitialized", "onOptionChanged", "onResize", "onResizeEnd", "onResizeStart", "onShowing", "onShown", "onTitleRendered", "position", "resizeEnabled", "restorePosition", "rtlEnabled", "shading", "shadingColor", "showCloseButton", "showTitle", "tabIndex", "title", "titleTemplate", "toolbarItems", "visible", "width", "wrapperAttr"], outputs: ["heightChange", "positionChange", "visibleChange", "widthChange"] }, { type: i5.DxoFilterRowComponent, selector: "dxo-filter-row", inputs: ["applyFilter", "applyFilterText", "betweenEndText", "betweenStartText", "operationDescriptions", "resetOperationText", "showAllText", "showOperationChooser", "visible"] }, { type: i5.DxoHeaderFilterComponent, selector: "dxo-header-filter", inputs: ["allowSearch", "dataSource", "groupInterval", "height", "searchMode", "width", "searchTimeout", "texts", "visible", "showRelevantValues"] }, { type: i5.DxoSelectionComponent, selector: "dxo-selection", inputs: ["allowSelectAll", "deferred", "mode", "selectAllMode", "showCheckBoxesMode", "recursive"] }, { type: i5.DxiColumnComponent, selector: "dxi-column", inputs: ["alignment", "allowEditing", "allowExporting", "allowFiltering", "allowFixing", "allowGrouping", "allowHeaderFiltering", "allowHiding", "allowReordering", "allowResizing", "allowSearch", "allowSorting", "autoExpandGroup", "buttons", "calculateCellValue", "calculateDisplayValue", "calculateFilterExpression", "calculateGroupValue", "calculateSortValue", "caption", "cellTemplate", "columns", "cssClass", "customizeText", "dataField", "dataType", "editCellTemplate", "editorOptions", "encodeHtml", "falseText", "filterOperations", "filterType", "filterValue", "filterValues", "fixed", "fixedPosition", "format", "formItem", "groupCellTemplate", "groupIndex", "headerCellTemplate", "headerFilter", "hidingPriority", "isBand", "lookup", "minWidth", "name", "ownerBand", "renderAsync", "selectedFilterOperation", "setCellValue", "showEditorAlways", "showInColumnChooser", "showWhenGrouped", "sortIndex", "sortingMethod", "sortOrder", "trueText", "type", "validationRules", "visible", "visibleIndex", "width"], outputs: ["filterValueChange", "filterValuesChange", "groupIndexChange", "selectedFilterOperationChange", "sortIndexChange", "sortOrderChange", "visibleChange", "visibleIndexChange"] }], directives: [{ type: i6.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i6.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { type: i7.DxTemplateDirective, selector: "[dxTemplate]", inputs: ["dxTemplateOf"] }, { type: i8.MatTooltip, selector: "[matTooltip]", inputs: ["matTooltipShowDelay", "matTooltipHideDelay", "matTooltipTouchGestures", "matTooltipPosition", "matTooltipDisabled", "matTooltip", "matTooltipClass"], exportAs: ["matTooltip"] }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: GridListComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'app-grid-list',
                    providers: [GridListService],
                    templateUrl: './grid-list.component.html',
                    styleUrls: ['./grid-list.component.scss']
                }]
        }], ctorParameters: function () { return [{ type: i1.Router }, { type: i2.AuthService }, { type: i3.LocalService }]; }, propDecorators: { dataGrid: [{
                type: ViewChild,
                args: [DxDataGridComponent, { static: false }]
            }], dataList: [{
                type: Input
            }], dataSource: [{
                type: Input
            }], columns: [{
                type: Input
            }], updateGrid: [{
                type: Input
            }], totalCount: [{
                type: Input
            }], page: [{
                type: Input
            }], isShow: [{
                type: Input
            }], remoteOperations: [{
                type: Input
            }], enableExport: [{
                type: Input
            }], showHeaderFilter: [{
                type: Input
            }], exportPageName: [{
                type: Input
            }], pageSize: [{
                type: Input
            }], currentPage: [{
                type: Output
            }], pageIndex: [{
                type: Output
            }], currentSize: [{
                type: Output
            }], editTableRow: [{
                type: Output
            }], viewTableRow: [{
                type: Output
            }], deleteTableRow: [{
                type: Output
            }], openExternalLink: [{
                type: Output
            }], openpopupLink: [{
                type: Output
            }], routeTo: [{
                type: Output
            }], openPopup: [{
                type: Output
            }], duplicateRow: [{
                type: Output
            }], sortOrder: [{
                type: Output
            }], filterSearchValue: [{
                type: Output
            }], filterBuilderPopup: [{
                type: Output
            }], filterPanel: [{
                type: Output
            }], multipleFilterValues: [{
                type: Output
            }], downloadTableRow: [{
                type: Output
            }], toggleRow: [{
                type: Output
            }], outComeTableRow: [{
                type: Output
            }], downloadFormResponseFiles: [{
                type: Output
            }], deleteFormResponseFiles: [{
                type: Output
            }], rowSelection: [{
                type: Output
            }], navigate: [{
                type: Output
            }], multipleFilterValueToAPI: [{
                type: Output
            }], selectedRowsData: [{
                type: Output
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3JpZC1saXN0LmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL3BpY3MtY29yZS9yYmFjLXBhZ2VhY2Nlc3Mvc3JjL2xpYi9waWNzLXJiYWMtcGFnZWFjY2Vzcy9Ac2hhcmVkL2NvbW1vbi1jb21wb25lbnRzL2dyaWQtbGlzdC9ncmlkLWxpc3QuY29tcG9uZW50LnRzIiwiLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vcHJvamVjdHMvcGljcy1jb3JlL3JiYWMtcGFnZWFjY2Vzcy9zcmMvbGliL3BpY3MtcmJhYy1wYWdlYWNjZXNzL0BzaGFyZWQvY29tbW9uLWNvbXBvbmVudHMvZ3JpZC1saXN0L2dyaWQtbGlzdC5jb21wb25lbnQuaHRtbCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQWlCLFNBQVMsRUFBRSxZQUFZLEVBQUUsS0FBSyxFQUFxQixNQUFNLEVBQUUsU0FBUyxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBR3BILE9BQU8sRUFBRSxlQUFlLEVBQUUsTUFBTSxnQ0FBZ0MsQ0FBQztBQUVqRSxPQUFPLEVBQUUsbUJBQW1CLEVBQUUsTUFBTSxvQkFBb0IsQ0FBQztBQUN6RCxPQUFPLFdBQVcsTUFBTSw4QkFBOEIsQ0FBQztBQUV2RCxPQUFPLEVBQUUsY0FBYyxFQUFFLE1BQU0sMkJBQTJCLENBQUM7QUFDM0QsT0FBTyxFQUFFLGNBQWMsSUFBSSxtQkFBbUIsRUFBRSxNQUFNLHlCQUF5QixDQUFDO0FBQ2hGLE9BQU8sS0FBSyxPQUFPLE1BQU0sNkJBQTZCLENBQUM7QUFDdkQsT0FBTyxFQUFFLE1BQU0sRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUN2QyxPQUFPLEtBQUssS0FBSyxNQUFNLE9BQU8sQ0FBQztBQUMvQixPQUFPLEtBQUssTUFBTSxNQUFNLFFBQVEsQ0FBQzs7Ozs7Ozs7OztBQVFqQyxNQUFNLE9BQU8saUJBQWlCO0lBK0Q1QixZQUFvQixN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LE1BQU07Z0JBQ0csWUFBWTtzQkFBckIsTUFBTTtnQkFDRyxjQUFjO3NCQUF2QixNQUFNO2dCQUNHLGdCQUFnQjtzQkFBekIsTUFBTTtnQkFDRyxhQUFhO3NCQUF0QixNQUFNO2dCQUNHLE9BQU87c0JBQWhCLE1BQU07Z0JBQ0csU0FBUztzQkFBbEIsTUFBTTtnQkFDRyxZQUFZO3NCQUFyQixNQUFNO2dCQUNHLFNBQVM7c0JBQWxCLE1BQU07Z0JBQ0csaUJBQWlCO3NCQUExQixNQUFNO2dCQUNHLGtCQUFrQjtzQkFBM0IsTUFBTTtnQkFDRyxXQUFXO3NCQUFwQixNQUFNO2dCQUNHLG9CQUFvQjtzQkFBN0IsTUFBTTtnQkFDRyxnQkFBZ0I7c0JBQXpCLE1BQU07Z0JBQ0csU0FBUztzQkFBbEIsTUFBTTtnQkFDRyxlQUFlO3NCQUF4QixNQUFNO2dCQUNHLHlCQUF5QjtzQkFBbEMsTUFBTTtnQkFDRyx1QkFBdUI7c0JBQWhDLE1BQU07Z0JBQ0csWUFBWTtzQkFBckIsTUFBTTtnQkFDRyxRQUFRO3NCQUFqQixNQUFNO2dCQUNHLHdCQUF3QjtzQkFBakMsTUFBTTtnQkFDRyxnQkFBZ0I7c0JBQXpCLE1BQU0iLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBBZnRlclZpZXdJbml0LCBDb21wb25lbnQsIEV2ZW50RW1pdHRlciwgSW5wdXQsIE9uQ2hhbmdlcywgT25Jbml0LCBPdXRwdXQsIFZpZXdDaGlsZCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBSb3V0ZXIgfSBmcm9tICdAYW5ndWxhci9yb3V0ZXInO1xyXG5pbXBvcnQgeyBBdXRoU2VydmljZSB9IGZyb20gJy4uLy4uLy4uL0Bjb3JlL3NlcnZpY2UvYXV0aC5zZXJ2aWNlJztcclxuaW1wb3J0IHsgR3JpZExpc3RTZXJ2aWNlIH0gZnJvbSAnLi4vZ3JpZC1saXN0L2dyaWQtbGlzdC5zZXJ2aWNlJztcclxuaW1wb3J0IHsgTG9jYWxTZXJ2aWNlIH0gZnJvbSAnLi4vLi4vLi4vQGNvcmUvc2VydmljZS9sb2NhbC5zZXJ2aWNlJztcclxuaW1wb3J0IHsgRHhEYXRhR3JpZENvbXBvbmVudCB9IGZyb20gJ2RldmV4dHJlbWUtYW5ndWxhcic7XHJcbmltcG9ydCBDdXN0b21TdG9yZSBmcm9tICdkZXZleHRyZW1lL2RhdGEvY3VzdG9tX3N0b3JlJztcclxuaW1wb3J0IERhdGFTb3VyY2UgZnJvbSAnZGV2ZXh0cmVtZS9kYXRhL2RhdGFfc291cmNlJztcclxuaW1wb3J0IHsgZXhwb3J0RGF0YUdyaWQgfSBmcm9tICdkZXZleHRyZW1lL2V4Y2VsX2V4cG9ydGVyJztcclxuaW1wb3J0IHsgZXhwb3J0RGF0YUdyaWQgYXMgZXhwb3J0RGF0YUdyaWRUb1BkZiB9IGZyb20gJ2RldmV4dHJlbWUvcGRmX2V4cG9ydGVyJztcclxuaW1wb3J0ICogYXMgRXhjZWxKUyBmcm9tICdleGNlbGpzL2Rpc3QvZXhjZWxqcy5taW4uanMnO1xyXG5pbXBvcnQgeyBzYXZlQXMgfSBmcm9tICdmaWxlLXNhdmVyLWVzJztcclxuaW1wb3J0ICogYXMganNQREYgZnJvbSAnanNwZGYnO1xyXG5pbXBvcnQgKiBhcyBtb21lbnQgZnJvbSAnbW9tZW50JztcclxuXHJcbkBDb21wb25lbnQoe1xyXG4gIHNlbGVjdG9yOiAnYXBwLWdyaWQtbGlzdCcsXHJcbiAgcHJvdmlkZXJzOiBbR3JpZExpc3RTZXJ2aWNlXSxcclxuICB0ZW1wbGF0ZVVybDogJy4vZ3JpZC1saXN0LmNvbXBvbmVudC5odG1sJyxcclxuICBzdHlsZVVybHM6IFsnLi9ncmlkLWxpc3QuY29tcG9uZW50LnNjc3MnXVxyXG59KVxyXG5leHBvcnQgY2xhc3MgR3JpZExpc3RDb21wb25lbnQgaW1wbGVtZW50cyBPbkluaXQsIE9uQ2hhbmdlcywgQWZ0ZXJWaWV3SW5pdCB7XHJcbiAgQFZpZXdDaGlsZChEeERhdGFHcmlkQ29tcG9uZW50LCB7IHN0YXRpYzogZmFsc2UgfSkgZGF0YUdyaWQ6IER4RGF0YUdyaWRDb21wb25lbnQ7XHJcbiAgQElucHV0KCkgZGF0YUxpc3Q6IGFueVtdID0gW107XHJcbiAgQElucHV0KCkgZGF0YVNvdXJjZTogRGF0YVNvdXJjZTtcclxuICBASW5wdXQoKSBjb2x1bW5zOiBhbnk7XHJcbiAgQElucHV0KCkgdXBkYXRlR3JpZDogYW55O1xyXG4gIEBJbnB1dCgpIHRvdGFsQ291bnQ6IG51bWJlcjtcclxuICBASW5wdXQoKSBwYWdlOiBudW1iZXI7XHJcbiAgQElucHV0KCkgaXNTaG93OiBib29sZWFuO1xyXG4gIEBJbnB1dCgpIHJlbW90ZU9wZXJhdGlvbnM6IGJvb2xlYW47XHJcbiAgQElucHV0KCkgZW5hYmxlRXhwb3J0OiBib29sZWFuO1xyXG4gIEBJbnB1dCgpIHNob3dIZWFkZXJGaWx0ZXI6IGJvb2xlYW47XHJcbiAgQElucHV0KCkgZXhwb3J0UGFnZU5hbWU6IHN0cmluZztcclxubmFycmF0aXZlRGF0YTogYW55O1xyXG4gIEBJbnB1dCgpIHNldCBwYWdlU2l6ZSh2YWx1ZTogbnVtYmVyKSB7XHJcbiAgICBpZiAodmFsdWUpIHtcclxuICAgICAgdGhpcy5jdXJyZW50UGFnZVNpemUgPSB2YWx1ZTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIHRoaXMuY3VycmVudFBhZ2VTaXplID0gMjA7XHJcbiAgICB9XHJcbiAgfVxyXG4gIEBPdXRwdXQoKSBjdXJyZW50UGFnZSA9IG5ldyBFdmVudEVtaXR0ZXI8bnVtYmVyPigpO1xyXG4gIEBPdXRwdXQoKSBwYWdlSW5kZXggPSBuZXcgRXZlbnRFbWl0dGVyPG51bWJlcj4oKTtcclxuICBAT3V0cHV0KCkgY3VycmVudFNpemUgPSBuZXcgRXZlbnRFbWl0dGVyPG51bWJlcj4oKTtcclxuICBAT3V0cHV0KCkgZWRpdFRhYmxlUm93ID0gbmV3IEV2ZW50RW1pdHRlcjxhbnk+KCk7XHJcbiAgQE91dHB1dCgpIHZpZXdUYWJsZVJvdyA9IG5ldyBFdmVudEVtaXR0ZXI8YW55PigpO1xyXG4gIEBPdXRwdXQoKSBkZWxldGVUYWJsZVJvdyA9IG5ldyBFdmVudEVtaXR0ZXI8YW55PigpO1xyXG4gIEBPdXRwdXQoKSBvcGVuRXh0ZXJuYWxMaW5rID0gbmV3IEV2ZW50RW1pdHRlcjxhbnk+KCk7XHJcbiAgQE91dHB1dCgpIG9wZW5wb3B1cExpbmsgPSBuZXcgRXZlbnRFbWl0dGVyPGFueT4oKTtcclxuICBAT3V0cHV0KCkgcm91dGVUbyA9IG5ldyBFdmVudEVtaXR0ZXI8YW55PigpO1xyXG4gIEBPdXRwdXQoKSBvcGVuUG9wdXAgPSBuZXcgRXZlbnRFbWl0dGVyPGFueT4oKTtcclxuICBAT3V0cHV0KCkgZHVwbGljYXRlUm93ID0gbmV3IEV2ZW50RW1pdHRlcjxhbnk+KCk7XHJcbiAgQE91dHB1dCgpIHNvcnRPcmRlciA9IG5ldyBFdmVudEVtaXR0ZXI8YW55PigpO1xyXG4gIEBPdXRwdXQoKSBmaWx0ZXJTZWFyY2hWYWx1ZSA9IG5ldyBFdmVudEVtaXR0ZXI8YW55PigpO1xyXG4gIEBPdXRwdXQoKSBmaWx0ZXJCdWlsZGVyUG9wdXAgPSBuZXcgRXZlbnRFbWl0dGVyPGFueT4oKTtcclxuICBAT3V0cHV0KCkgZmlsdGVyUGFuZWwgPSBuZXcgRXZlbnRFbWl0dGVyPGFueT4oKTtcclxuICBAT3V0cHV0KCkgbXVsdGlwbGVGaWx0ZXJWYWx1ZXMgPSBuZXcgRXZlbnRFbWl0dGVyPGFueT4oKTtcclxuICBAT3V0cHV0KCkgZG93bmxvYWRUYWJsZVJvdyA9IG5ldyBFdmVudEVtaXR0ZXI8YW55PigpO1xyXG4gIEBPdXRwdXQoKSB0b2dnbGVSb3cgPSBuZXcgRXZlbnRFbWl0dGVyPGFueT4oKTtcclxuICBAT3V0cHV0KCkgb3V0Q29tZVRhYmxlUm93ID0gbmV3IEV2ZW50RW1pdHRlcjxhbnk+KCk7XHJcbiAgQE91dHB1dCgpIGRvd25sb2FkRm9ybVJlc3BvbnNlRmlsZXMgPSBuZXcgRXZlbnRFbWl0dGVyPGFueT4oKTtcclxuICBAT3V0cHV0KCkgZGVsZXRlRm9ybVJlc3BvbnNlRmlsZXMgPSBuZXcgRXZlbnRFbWl0dGVyPGFueT4oKTtcclxuICBAT3V0cHV0KCkgcm93U2VsZWN0aW9uID0gbmV3IEV2ZW50RW1pdHRlcjxhbnk+KCk7XHJcbiAgQE91dHB1dCgpIG5hdmlnYXRlID0gbmV3IEV2ZW50RW1pdHRlcjxhbnk+KCk7XHJcbiAgQE91dHB1dCgpIG11bHRpcGxlRmlsdGVyVmFsdWVUb0FQSSA9IG5ldyBFdmVudEVtaXR0ZXI8YW55PigpO1xyXG4gIEBPdXRwdXQoKSBzZWxlY3RlZFJvd3NEYXRhID0gbmV3IEV2ZW50RW1pdHRlcjxhbnk+KCk7XHJcbiAgZGF0YUZpZWxkOiBzdHJpbmdbXTtcclxuICBjb2x1bW5IZWFkZXI6IGFueVtdO1xyXG4gIHBvcHVwUG9zaXRpb246IGFueTtcclxuICBmaWx0ZXJWYWx1ZTogKHN0cmluZyB8IHN0cmluZ1tdKVtdO1xyXG4gIGN1c3RvbU9wZXJhdGlvbnM6IEFycmF5PGFueT47XHJcbiAgZmllbGRzOiBhbnk7XHJcbiAgY3VzdG9tU3RvcmU6IGFueTtcclxuICB0ZW1wQ29sdW1uczogYW55W107XHJcbiAgT3JnYW5pemF0aW9uOiBhbnk7XHJcbiAgZFVybDogc3RyaW5nO1xyXG4gIHJkVXJsOiBzdHJpbmc7XHJcbiAgclVybDogYW55O1xyXG4gIHVzZXI6IGFueTtcclxuICBkaXNwbGF5TW9kZTogc3RyaW5nO1xyXG4gIGN1cnJlbnRQYWdlU2l6ZTogYW55O1xyXG4gIGN1cnJlbnRGaWx0ZXI6IGFueTtcclxuICBoZWFkZXJGaWx0ZXJEYXRhOiBhbnk7XHJcbiAgY29uc3RydWN0b3IocHJpdmF0ZSByb3V0ZXI6IFJvdXRlciwgcHVibGljIGF1dGg6IEF1dGhTZXJ2aWNlLCBwcml2YXRlIGxvY2Fsc3RvcmFnZTogTG9jYWxTZXJ2aWNlKSB7XHJcbiAgICAvKipcclxuICAgICAqIGluaXRpYXRpbmcgdGhlIGdyaWQgbGlzdFxyXG4gICAgICovXHJcbiAgICB0aGlzLmxvYWRHV2l0aFBhcmFtKCk7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBmZXRjaGluZyBsb2dpbiBkZXRhaWxzIGZyb20gbG9jYWwgc3RvcmFnZVxyXG4gICAgICovXHJcbiAgICB0aGlzLnVzZXIgPSB0aGlzLmxvY2Fsc3RvcmFnZS5nZXRPYmooJ3VzZXInKTtcclxuICAgIHRoaXMuZGlzcGxheU1vZGUgPSAnY29tcGFjdCc7XHJcbiAgICB0aGlzLmN1cnJlbnRGaWx0ZXIgPSAnYXV0byc7XHJcbiAgfVxyXG5cclxuICBuZ09uSW5pdCgpIHtcclxuICAgIHRoaXMuclVybCA9IHRoaXMucm91dGVyLnVybC5zcGxpdCgnLycpO1xyXG4gICAgdGhpcy50ZW1wQ29sdW1ucyA9IHRoaXMuY29sdW1ucztcclxuICAgIGlmICh0aGlzLmNvbHVtbnMgJiYgdGhpcy5jb2x1bW5zLmdyaWRDb25maWdGb3JtQXJyYXkpIHtcclxuICAgICAgdGhpcy5jb2x1bW5IZWFkZXIgPSB0aGlzLmNvbHVtbnMuZ3JpZENvbmZpZ0Zvcm1BcnJheS5tYXAoY29sdW1uID0+IGNvbHVtbi5oZWFkZXIpO1xyXG4gICAgICB0aGlzLmNvbHVtbnMgPSB0aGlzLmNvbHVtbnMuZ3JpZENvbmZpZ0Zvcm1BcnJheTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIHRoaXMuY29sdW1uSGVhZGVyID0gdGhpcy5jb2x1bW5zLm1hcChjb2x1bW4gPT4gY29sdW1uLmhlYWRlcik7XHJcbiAgICB9XHJcbiAgICB0aGlzLnBvcHVwUG9zaXRpb24gPSB7IG9mOiB3aW5kb3csIGF0OiAndG9wJywgbXk6ICd0b3AnLCBvZmZzZXQ6IHsgeTogMTAgfSB9O1xyXG4gICAgdGhpcy5maWx0ZXJWYWx1ZSA9IFtdO1xyXG4gICAgdGhpcy5jdXN0b21PcGVyYXRpb25zID0gW107XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiByZS1yZW5kZXIgdGhlIGdyaWQgd2hlbiBpbnB1dCBkYXRhIGlzIGNoYW5nZWQuXHJcbiAgICovXHJcbiAgbmdPbkNoYW5nZXMoKSB7XHJcbiAgICB0aGlzLmxvYWRHV2l0aFBhcmFtKCk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBSZW5kZXJpbmcgZGF0YSBncmlkIGNvbmRpdGlvbiB3aXNlIHRoYXQgbG9naW4gdXNlciBpcyBhZG1pbiBvciBub3RcclxuICAgKi9cclxuICBsb2FkR1dpdGhQYXJhbSgpIHtcclxuICAgIGlmICghdGhpcy5hdXRoLmlzQWRtaW4oKSkge1xyXG4gICAgICB0aGlzLmxvYWRHcmlkKHsgdmFsdWU6ICF0aGlzLk9yZ2FuaXphdGlvbiA/IHRoaXMuYXV0aC5nZXRPcmdJRCgpIDogdGhpcy5Pcmdhbml6YXRpb24gfSwgZmFsc2UpO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgdGhpcy5sb2FkR3JpZCh7IHZhbHVlOiB0aGlzLk9yZ2FuaXphdGlvbiA/IHRoaXMuT3JnYW5pemF0aW9uIDogJ1NlbGVjdC1BTEwnIH0sIGZhbHNlKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIG5nQWZ0ZXJWaWV3SW5pdCgpIHtcclxuICAgIC8qKlxyXG4gICAgICogRGF0YWdyaWQgZXZlbiBsaXN0ZW5lciB3ZSBjYW4gY3VzdG9taXplIGNvbHVtbiBldmVudFxyXG4gICAgICovXHJcbiAgICB0aGlzLmRhdGFHcmlkLm9uUm93Q2xpY2suc3Vic2NyaWJlKHJvdyA9PiB7XHJcbiAgICAgIHRoaXMuc2VsZWN0ZWRSb3dzRGF0YS5lbWl0KHJvdyk7XHJcbiAgICB9KTtcclxuICAgIHRoaXMuZGF0YUdyaWQub25PcHRpb25DaGFuZ2VkLnN1YnNjcmliZShlID0+IHtcclxuICAgICAgaWYgKGUubmFtZSA9PT0gJ2NvbHVtbnMnICYmIGUuZnVsbE5hbWUuZW5kc1dpdGgoJ2ZpbHRlclZhbHVlcycpKSB7XHJcbiAgICAgICAgY29uc3QgY29sSW5kZXggPSBOdW1iZXIoXHJcbiAgICAgICAgICBlLmZ1bGxOYW1lXHJcbiAgICAgICAgICAgIC5tYXRjaCgvXFxbXFxkK1xcXS8pWzBdXHJcbiAgICAgICAgICAgIC5yZXBsYWNlKCdbJywgJycpXHJcbiAgICAgICAgICAgIC5yZXBsYWNlKCddJywgJycpXHJcbiAgICAgICAgKTtcclxuICAgICAgICBlLmNvbXBvbmVudC5jb2x1bW5PcHRpb24oY29sSW5kZXgsICdmaWx0ZXJWYWx1ZXMnKTtcclxuICAgICAgICB0aGlzLm11bHRpcGxlRmlsdGVyVmFsdWVzLmVtaXQoZSk7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIC8vIFNlYXJjaFxyXG4gICAgICBpZiAoZS5uYW1lID09PSAnY29sdW1ucycgJiYgZS5mdWxsTmFtZS5lbmRzV2l0aCgnZmlsdGVyVmFsdWUnKSkge1xyXG4gICAgICAgIGNvbnNvbGUubG9nKGUpO1xyXG4gICAgICAgIHRoaXMuZmlsdGVyU2VhcmNoVmFsdWUuZW1pdChlKTtcclxuICAgICAgfVxyXG5cclxuICAgICAgLy8gZmlsdGVyIEJ1aWxkZXIgUG9wdXBcclxuXHJcbiAgICAgIGlmIChlLm5hbWUgPT09ICdmaWx0ZXJCdWlsZGVyUG9wdXAnKSB7XHJcbiAgICAgICAgY29uc29sZS5sb2coJ2ZpbHRlckJ1aWxkZXJQb3B1cCcpO1xyXG4gICAgICAgIGNvbnNvbGUubG9nKGUpO1xyXG4gICAgICAgIHRoaXMuZmlsdGVyQnVpbGRlclBvcHVwLmVtaXQoZSk7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIC8vIGZpbHRlciBQYW5lbCAtIGVuYWJsZSBvciBkaXNhYmxlXHJcbiAgICAgIGlmIChlLm5hbWUgPT09ICdmaWx0ZXJQYW5lbCcpIHtcclxuICAgICAgICBjb25zb2xlLmxvZyhlLnZhbHVlKTtcclxuICAgICAgICB0aGlzLmZpbHRlclBhbmVsLmVtaXQoZSk7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIC8vIFNvcnRpbmdcclxuICAgICAgaWYgKGUubmFtZSA9PT0gJ2NvbHVtbnMnICYmIGUuZnVsbE5hbWUuZW5kc1dpdGgoJ3NvcnRPcmRlcicpKSB7XHJcbiAgICAgICAgdGhpcy5zb3J0T3JkZXIuZW1pdChlKTtcclxuICAgICAgfVxyXG5cclxuICAgICAgLy8gUGFnaW5nXHJcbiAgICAgIGlmIChlLm5hbWUgPT09ICdwYWdpbmcnKSB7XHJcbiAgICAgICAgdGhpcy5jdXJyZW50UGFnZS5lbWl0KGUudmFsdWUpO1xyXG4gICAgICB9XHJcbiAgICAgIC8vIHBhZ2VJbmRleFxyXG4gICAgICBpZiAoZS5mdWxsTmFtZSA9PT0gJ3BhZ2luZy5wYWdlSW5kZXgnKSB7XHJcbiAgICAgICAgdGhpcy5wYWdlSW5kZXguZW1pdChlLnZhbHVlKTtcclxuICAgICAgfVxyXG4gICAgICAvLyBwYWdlU2l6ZVxyXG4gICAgICBpZiAoZS5mdWxsTmFtZSA9PT0gJ3BhZ2luZy5wYWdlU2l6ZScpIHtcclxuICAgICAgICB0aGlzLmN1cnJlbnRTaXplLmVtaXQoZS52YWx1ZSk7XHJcbiAgICAgIH1cclxuICAgIH0pO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogR2VuZXJhdGluZyBkYXRhIGdyaWQgYW5kIHJlc3RydWN0dXJpbmcgZGF0YSBmb3IgRGV2ZWxvcGVyIGdyaWRcclxuICAgKiBAcGFyYW0gb3JnSUQgb3JpZ2luYXRpb24gZGV0YWlsc1xyXG4gICAqIEBwYXJhbSBsb2FkIG9wdGlvbmFsIGJvb2xlYW4gaXMgZm9yIGNoZWNraW5nIGRhdGEgc2hvdWxkIGxvYWQgb3JnYW5pemF0aW9uIHJlc3BlY3RpdmUgb3IgYWxsXHJcbiAgICovXHJcbiAgbG9hZEdyaWQob3JnSUQsIGxvYWQgPSB0cnVlKSB7XHJcbiAgICB0aGlzLk9yZ2FuaXphdGlvbiA9IG9yZ0lELnZhbHVlO1xyXG4gICAgaWYgKGxvYWQpIHtcclxuICAgICAgdGhpcy5jdXJyZW50UGFnZS5lbWl0KG9yZ0lELnZhbHVlID09PSAnU2VsZWN0LUFMTCcgPyAnYWxsJyA6IG9yZ0lELnZhbHVlKTtcclxuICAgIH1cclxuXHJcbiAgICBpZiAodGhpcy5kYXRhTGlzdD8ubGVuZ3RoICYmIHRoaXMuclVybCAmJiB0aGlzLnJVcmxbMl0gPT09ICd2aWV3LWRhc2hib2FyZCcpIHtcclxuICAgICAgdGhpcy5kVXJsID0gJ3ZpZXctZGFzaGJvYXJkL2Rhc2hib2FyZCc7XHJcbiAgICAgIHRoaXMucm91dGVyLm5hdmlnYXRlQnlVcmwoYHBhZ2VzLyR7dGhpcy5kVXJsfS8ke3RoaXMuZGF0YUxpc3RbMF1bJ2lkJ119YCk7XHJcbiAgICB9XHJcbiAgICB0aGlzLmN1c3RvbVN0b3JlID0gbmV3IEN1c3RvbVN0b3JlKHtcclxuICAgICAgbG9hZDogX29wdHMgPT4ge1xyXG4gICAgICAgIHRoaXMubXVsdGlwbGVGaWx0ZXJWYWx1ZVRvQVBJLmVtaXQoX29wdHMuZmlsdGVyKTtcclxuICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKHRoaXMuZGF0YUxpc3QpO1xyXG4gICAgICB9LFxyXG4gICAgICB0b3RhbENvdW50OiBfb3B0cyA9PiB7XHJcbiAgICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSh0aGlzLnRvdGFsQ291bnQpO1xyXG4gICAgICB9XHJcbiAgICB9KTtcclxuICB9XHJcblxyXG4gIGdldFJvdXRlcihkYXRhKSB7XHJcbiAgICB0aGlzLnJvdXRlVG8uZW1pdChkYXRhKTtcclxuICB9XHJcblxyXG4gIG5hdmlnYXRlVG8oZGF0YSkge1xyXG4gICAgdGhpcy5uYXZpZ2F0ZS5lbWl0KGRhdGEpO1xyXG4gIH1cclxuXHJcbiAgcG9wdXAoZGF0YSkge1xyXG4gICAgdGhpcy5vcGVuUG9wdXAuZW1pdChkYXRhKTtcclxuICB9XHJcblxyXG4gIGRvd25sb2FkRGF0YShldnQpIHtcclxuICAgIHRoaXMuZG93bmxvYWRUYWJsZVJvdy5lbWl0KGV2dCk7XHJcbiAgfVxyXG5cclxuICBlZGl0RGF0YShldnQpIHtcclxuICAgIHRoaXMuZWRpdFRhYmxlUm93LmVtaXQoZXZ0KTtcclxuICB9XHJcbiAgZWRpdERhdGFNeUFwcGxjaWF0aW9uKGV2dCkge1xyXG4gICAgdGhpcy5lZGl0VGFibGVSb3cuZW1pdChldnQpO1xyXG4gIH1cclxuICBlZGl0QXBwZWFsKGV2dCkge1xyXG4gICAgdGhpcy5lZGl0VGFibGVSb3cuZW1pdChldnQpO1xyXG4gIH1cclxuICBvblNlbGVjdGlvbkNoYW5nZWQoZXZ0KSB7XHJcbiAgICB0aGlzLnJvd1NlbGVjdGlvbi5lbWl0KGV2dCk7XHJcbiAgfVxyXG5cclxuICB2aWV3RGF0YShldnQpIHtcclxuICAgIHRoaXMudmlld1RhYmxlUm93LmVtaXQoZXZ0KTtcclxuICB9XHJcblxyXG4gIGRlbGV0ZURhdGEoZXZ0KSB7XHJcbiAgICB0aGlzLmRlbGV0ZVRhYmxlUm93LmVtaXQoZXZ0KTtcclxuICB9XHJcblxyXG4gIGR1cGxpY2F0ZURhdGUoZXZ0KSB7XHJcbiAgICB0aGlzLmR1cGxpY2F0ZVJvdy5lbWl0KGV2dCk7XHJcbiAgfVxyXG5cclxuICBvcGVuTGluayhldnQpIHtcclxuICAgIHRoaXMub3BlbkV4dGVybmFsTGluay5lbWl0KGV2dCk7XHJcbiAgfVxyXG5cclxuICBvcGVuUG9wdXBMaW5rKGV2dCkge1xyXG4gICAgdGhpcy5vcGVucG9wdXBMaW5rLmVtaXQoZXZ0KTtcclxuICB9XHJcblxyXG4gIGFjdGl2ZVVzZXIoZXZ0KSB7XHJcbiAgICB0aGlzLnRvZ2dsZVJvdy5lbWl0KGV2dCk7XHJcbiAgfVxyXG4gIGdldFZpc2FiaWxpdHlCeUNob29zYWJsZVByb3AoY2hvb3NlciwgdmlzaWJsZSkge1xyXG4gICAgaWYgKGNob29zZXIpIHtcclxuICAgICAgcmV0dXJuIHZpc2libGU7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICByZXR1cm4gdHJ1ZTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIGdldFNvcnRPcmRlcihkZWZhdWx0U29ydENvbHVtbiwgZGVmYXVsdFNvcnRUeXBlLCBjb2x1bW5EZWYpIHtcclxuICAgIGlmIChkZWZhdWx0U29ydENvbHVtbiAmJiBkZWZhdWx0U29ydFR5cGUpIHtcclxuICAgICAgcmV0dXJuIGRlZmF1bHRTb3J0Q29sdW1uID09PSBjb2x1bW5EZWYgPyBkZWZhdWx0U29ydFR5cGUgOiAnJztcclxuICAgIH1cclxuICAgIHJldHVybiAnJztcclxuICB9XHJcbiAgb3V0Q29tZURhdGEoZXZ0KSB7XHJcbiAgICB0aGlzLm91dENvbWVUYWJsZVJvdy5lbWl0KGV2dCk7XHJcbiAgfVxyXG5cclxuICBkb3dubG9hZEZvcm1SZXNwb25zZUF0dGFjaG1lbnRzKGV2dCkge1xyXG4gICAgdGhpcy5kb3dubG9hZEZvcm1SZXNwb25zZUZpbGVzLmVtaXQoZXZ0KTtcclxuICB9XHJcblxyXG4gIGRlbGV0ZUZvcm1SZXNwb25zZUF0dGFjaG1lbnRzKGV2dCkge1xyXG4gICAgdGhpcy5kZWxldGVGb3JtUmVzcG9uc2VGaWxlcy5lbWl0KGV2dCk7XHJcbiAgfVxyXG5cclxuICBvblJvd1ByZXBhcmVkKGUpIHtcclxuICAgIGlmIChlLnJvd1R5cGUgPT0gJ2RhdGEnICYmIGUuZGF0YS5pc25ldykge1xyXG4gICAgICBjb25zdCBlbGVtZW50ID0gZS5yb3dFbGVtZW50O1xyXG4gICAgICBlbGVtZW50LmNsYXNzTGlzdC5hZGQoJ2lzbmV3Jyk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBvbkNlbGxQcmVwYXJlZChlKSB7XHJcbiAgICBpZiAoZS5yb3dUeXBlID09ICdkYXRhJykge1xyXG4gICAgICBpZiAoZS5jb2x1bW4uZGF0YUZpZWxkID09PSAnbm90aWNlJykge1xyXG4gICAgICAgIGNvbnN0IGVsZW1lbnQgPSBlLmNlbGxFbGVtZW50O1xyXG4gICAgICAgIGUuY2VsbEVsZW1lbnQuaW5uZXJIVE1MID0gJyc7XHJcbiAgICAgICAgY29uc3QgbGl2ZXRleHQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcclxuICAgICAgICB0aGlzLmNoZWNrT25jZWxscHJlcGFyZShlLCBsaXZldGV4dCk7XHJcbiAgICAgICAgZWxlbWVudC5hcHBlbmRDaGlsZChsaXZldGV4dCk7XHJcbiAgICAgIH0gZWxzZSBpZiAoZS5jb2x1bW4uZGF0YUZpZWxkID09PSAnbm90aWZpY2F0aW9uRXZlbnRDaGFubmVscycpIHtcclxuICAgICAgICBjb25zdCBlbGVtZW50ID0gZS5jZWxsRWxlbWVudDtcclxuICAgICAgICBlLmNlbGxFbGVtZW50LmlubmVySFRNTCA9ICcnO1xyXG4gICAgICAgIGNvbnN0IGxpdmV0ZXh0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XHJcbiAgICAgICAgbGV0IGVsZSA9ICcnO1xyXG4gICAgICAgIGUuZGF0YS5ub3RpZmljYXRpb25FdmVudENoYW5uZWxzLm1hcCh0ID0+IHtcclxuICAgICAgICAgIGlmICh0LnRlbXBsYXRlbmFtZSkge1xyXG4gICAgICAgICAgICBlbGUgKz0gYDxsYWJlbD4ke3QudGVtcGxhdGVuYW1lfSZuYnNwOyg8Yj4ke3QudGVtcGxhdGVjaGFubmVsfTwvYj4pPC9sYWJlbD4sYDtcclxuICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuICAgICAgICBsaXZldGV4dC5pbm5lckhUTUwgPSBlbGU7XHJcbiAgICAgICAgZWxlbWVudC5hcHBlbmRDaGlsZChsaXZldGV4dCk7XHJcbiAgICAgIH0gZWxzZSBpZiAoZS5jb2x1bW4uZGF0YUZpZWxkID09PSAnbGluaycpIHtcclxuICAgICAgICBjb25zdCBlbGVtZW50ID0gZS5jZWxsRWxlbWVudDtcclxuICAgICAgICBlLmNlbGxFbGVtZW50LmlubmVySFRNTCA9ICcnO1xyXG4gICAgICAgIGNvbnN0IGxpdmV0ZXh0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XHJcbiAgICAgICAgbGl2ZXRleHQuaW5uZXJIVE1MID0gYDxpbWcgIHNyYz1cIiR7XHJcbiAgICAgICAgICBlLmRhdGEubGluayA/IGUuZGF0YT8ubGluaz8uc3BsaXQoJz8nKVswXSA6ICcnXHJcbiAgICAgICAgfVwic3R5bGU9XCJtYXgtd2lkdGg6IDQ1cHg7IGN1cnNvcjogcG9pbnRlclwiLz5gO1xyXG4gICAgICAgIGVsZW1lbnQuYXBwZW5kQ2hpbGQobGl2ZXRleHQpO1xyXG4gICAgICB9XHJcbiAgICAgIHRoaXMuY2hlY2tDZWxscHJlcGFyZShlKTtcclxuICAgIH1cclxuICB9XHJcbiAgY2hlY2tDZWxscHJlcGFyZShlKSB7XHJcbiAgICBpZiAoZS5jb2x1bW4uZGF0YUZpZWxkID09PSAnc3RhdHVzJyAmJiBlLmRhdGFbJ3RhYm5hbWUnXSA9PT0gJ1JFQ09SRFMnICYmIGUuZGF0YVsnc3RhdHVzJ10gPT09ICdOTyBNQVRDSCcpIHtcclxuICAgICAgY29uc3QgZWxlbWVudCA9IGUuY2VsbEVsZW1lbnQ7XHJcbiAgICAgIGNvbnN0IGxpdmV0ZXh0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc3BhbicpO1xyXG4gICAgICBsaXZldGV4dC5jbGFzc0xpc3QuYWRkKCdtbC0yJyk7XHJcbiAgICAgIGxpdmV0ZXh0LmlubmVySFRNTCA9IGA8ZW0gY2xhc3M9XCJmYSBmYS1pbmZvLWNpcmNsZVwiIGFyaWEtaGlkZGVuPVwidHJ1ZVwiIHRpdGxlPVwiJHtlLmRhdGE/LmV4ZWN1dGlvbl9lcnJvcj8uZXJyb3J9XCIgPjwvZW0+YDtcclxuICAgICAgaWYgKGUuZGF0YT8uZXhlY3V0aW9uX2Vycm9yPy5lcnJvcikge1xyXG4gICAgICAgIGVsZW1lbnQuYXBwZW5kQ2hpbGQobGl2ZXRleHQpO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBjaGVja09uY2VsbHByZXBhcmUoZSwgbGl2ZXRleHQpIHtcclxuICAgIGlmIChlLnZhbHVlICE9PSAnTm8gRGF0YSBGb3VuZCcpIHtcclxuICAgICAgbGl2ZXRleHQuaW5uZXJIVE1MID0gYDxhIGNsYXNzPVwiYnRuLWxpbmsgbG9naW5MYWJlbFwiIGhyZWY9XCIke2UudmFsdWV9XCIgdGFyZ2V0PVwiX2JsYW5rXCI+Q2xpY2sgSGVyZTxhPmA7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICBsaXZldGV4dC5pbm5lckhUTUwgPSAnTm8gRGF0YSBGb3VuZCc7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBvbkV4cG9ydGluZyhlKSB7XHJcbiAgICBjb25zdCBwYWdlTmFtZSA9IHRoaXMubG9jYWxzdG9yYWdlLmdldE9iaignRklMRSBFWFBPUlQgTkFNRScpO1xyXG4gICAgY29uc3QgY3VycmVudERhdGUgPSBtb21lbnQoKS5mb3JtYXQoJ1lZWVktTU0tREQnKTtcclxuICAgIGxldCBmaWxlTmFtZTogc3RyaW5nO1xyXG4gICAgaWYgKHBhZ2VOYW1lKSB7XHJcbiAgICAgIGZpbGVOYW1lID0gYCR7cGFnZU5hbWV9IFZlcnNpb25zICR7Y3VycmVudERhdGV9YDtcclxuICAgIH0gZWxzZSBpZiAodGhpcy5leHBvcnRQYWdlTmFtZSkge1xyXG4gICAgICBmaWxlTmFtZSA9IGAke3RoaXMuZXhwb3J0UGFnZU5hbWV9LSR7Y3VycmVudERhdGV9YDtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIGZpbGVOYW1lID0gYER5bmFtaWMtUGFnZXMgJHtjdXJyZW50RGF0ZX1gO1xyXG4gICAgfVxyXG4gICAgaWYgKGUuZm9ybWF0ID09PSAncGRmJykge1xyXG4gICAgICBjb25zdCBkb2MgPSBuZXcganNQREYuanNQREYoKTtcclxuICAgICAgZXhwb3J0RGF0YUdyaWRUb1BkZih7XHJcbiAgICAgICAganNQREZEb2N1bWVudDogZG9jLFxyXG4gICAgICAgIGNvbXBvbmVudDogZS5jb21wb25lbnRcclxuICAgICAgfSkudGhlbigoKSA9PiB7XHJcbiAgICAgICAgZG9jLnNhdmUoYCR7ZmlsZU5hbWV9LnBkZmApO1xyXG4gICAgICB9KTtcclxuICAgIH0gZWxzZSBpZiAoZS5mb3JtYXQgPT09ICd4bHN4Jykge1xyXG4gICAgICBlLmZpbGVOYW1lID0gZmlsZU5hbWU7XHJcbiAgICB9IGVsc2UgaWYgKGUuZm9ybWF0ID09PSAnY3N2Jykge1xyXG4gICAgICBjb25zdCB3b3JrYm9vayA9IG5ldyBFeGNlbEpTLldvcmtib29rKCk7XHJcbiAgICAgIGNvbnN0IHdvcmtzaGVldCA9IHdvcmtib29rLmFkZFdvcmtzaGVldCgnTWFpbiBzaGVldCcpO1xyXG4gICAgICBleHBvcnREYXRhR3JpZCh7XHJcbiAgICAgICAgY29tcG9uZW50OiBlLmNvbXBvbmVudCxcclxuICAgICAgICB3b3Jrc2hlZXQ6IHdvcmtzaGVldFxyXG4gICAgICB9KS50aGVuKGZ1bmN0aW9uICgpIHtcclxuICAgICAgICB3b3JrYm9vay5jc3Yud3JpdGVCdWZmZXIoKS50aGVuKGZ1bmN0aW9uIChidWZmZXIpIHtcclxuICAgICAgICAgIHNhdmVBcyhuZXcgQmxvYihbYnVmZmVyXSwgeyB0eXBlOiAnYXBwbGljYXRpb24vb2N0ZXQtc3RyZWFtJyB9KSwgYCR7ZmlsZU5hbWV9LmNzdmApO1xyXG4gICAgICAgIH0pO1xyXG4gICAgICB9KTtcclxuXHJcbiAgICAgIGUuY2FuY2VsID0gdHJ1ZTtcclxuICAgIH1cclxuICB9XHJcbiAgY29udGVudFJlYWR5ID0gZSA9PiB7XHJcbiAgICBjb25zdCByZW9yZGVyQ29sdW1ucyA9IGUuY29tcG9uZW50Lmluc3RhbmNlKCkuZ2V0VmlzaWJsZUNvbHVtbnMoKTtcclxuICAgIGNvbnNvbGUubG9nKHJlb3JkZXJDb2x1bW5zLCAncmVvcmRlckNvbHVtbnMnKTtcclxuICB9O1xyXG4gIGN1c3RvbWl6ZUhlYWRlckZpbHRlckRhdGEob3B0aW9ucykge1xyXG4gICAgb3B0aW9ucy5kYXRhU291cmNlLnBvc3RQcm9jZXNzID0gcmVzdWx0cyA9PiB7XHJcbiAgICAgIHJlc3VsdHMubWFwKHggPT4ge1xyXG4gICAgICAgIHgudGV4dCA9IHhbb3B0aW9ucy5kYXRhU291cmNlLmdyb3VwWzBdLnNlbGVjdG9yXTtcclxuICAgICAgICB4LnZhbHVlID0gW29wdGlvbnMuZGF0YVNvdXJjZS5ncm91cFswXS5zZWxlY3RvciwgJz0nLCB4W29wdGlvbnMuZGF0YVNvdXJjZS5ncm91cFswXS5zZWxlY3Rvcl1dO1xyXG4gICAgICAgIHJldHVybiB4O1xyXG4gICAgICB9KTtcclxuICAgICAgY29uc29sZS5sb2cocmVzdWx0cywgJ3VwZGF0ZSBjdXN0b21pemVIZWFkZXJGaWx0ZXJEYXRhJyk7XHJcbiAgICAgIHJldHVybiByZXN1bHRzO1xyXG4gICAgfTtcclxuICB9XHJcbn1cclxuIiwiPGR4LWRhdGEtZ3JpZFxyXG4gIGlkPVwiZ3JpZENvbnRhaW5lclwiXHJcbiAgW2RhdGFTb3VyY2VdPVwiY3VzdG9tU3RvcmVcIlxyXG4gIFthbGxvd0NvbHVtblJlb3JkZXJpbmddPVwidHJ1ZVwiXHJcbiAgW2FsbG93Q29sdW1uUmVzaXppbmddPVwidHJ1ZVwiXHJcbiAgW2NvbHVtbkF1dG9XaWR0aF09XCJ0cnVlXCJcclxuICBbc2hvd0JvcmRlcnNdPVwidHJ1ZVwiXHJcbiAgW3Jvd0FsdGVybmF0aW9uRW5hYmxlZF09XCJ1cGRhdGVHcmlkPy5yb3dTZWxlY3Rpb24gPyBmYWxzZSA6IHRydWVcIlxyXG4gIFtzaG93Q29sdW1uTGluZXNdPVwidHJ1ZVwiXHJcbiAgW3Nob3dSb3dMaW5lc109XCJ0cnVlXCJcclxuICBbZmlsdGVyVmFsdWVdPVwiZmlsdGVyVmFsdWVcIlxyXG4gIFtyZW1vdGVPcGVyYXRpb25zXT1cInJlbW90ZU9wZXJhdGlvbnMgPyByZW1vdGVPcGVyYXRpb25zIDogZmFsc2VcIlxyXG4gIFtob3ZlclN0YXRlRW5hYmxlZF09XCJ1cGRhdGVHcmlkPy5yb3dTZWxlY3Rpb25cIlxyXG4gIChvblNlbGVjdGlvbkNoYW5nZWQpPVwib25TZWxlY3Rpb25DaGFuZ2VkKCRldmVudClcIlxyXG4gIChvblJvd1ByZXBhcmVkKT1cIm9uUm93UHJlcGFyZWQoJGV2ZW50KVwiXHJcbiAgKG9uQ2VsbFByZXBhcmVkKT1cIm9uQ2VsbFByZXBhcmVkKCRldmVudClcIlxyXG4gIChvbkNvbnRlbnRSZWFkeSk9XCJjb250ZW50UmVhZHkoJGV2ZW50KVwiXHJcbiAgKG9uRXhwb3J0aW5nKT1cIm9uRXhwb3J0aW5nKCRldmVudClcIj5cclxuICA8ZHhvLWxvYWQtcGFuZWwgW2VuYWJsZWRdPVwiZmFsc2VcIj48L2R4by1sb2FkLXBhbmVsPlxyXG4gIDxkeG8tZmlsdGVyLXBhbmVsIFt2aXNpYmxlXT1cImZhbHNlXCI+PC9keG8tZmlsdGVyLXBhbmVsPlxyXG4gIDxkeG8tcGFnaW5nIFtwYWdlU2l6ZV09XCJjdXJyZW50UGFnZVNpemVcIj48L2R4by1wYWdpbmc+XHJcbiAgPGR4by1wYWdlclxyXG4gICAgW3Zpc2libGVdPVwidHJ1ZVwiXHJcbiAgICBbYWxsb3dlZFBhZ2VTaXplc109XCJbMTAsIDI1LCA1MCwgMTAwXVwiXHJcbiAgICBbZGlzcGxheU1vZGVdPVwiZGlzcGxheU1vZGVcIlxyXG4gICAgW3Nob3dQYWdlU2l6ZVNlbGVjdG9yXT1cInRydWVcIlxyXG4gICAgW3Nob3dJbmZvXT1cInRydWVcIlxyXG4gICAgW3Nob3dOYXZpZ2F0aW9uQnV0dG9uc109XCJ0cnVlXCI+PC9keG8tcGFnZXI+XHJcbiAgPCEtLWVuZCBwYWdpbmF0aW9uLS0+XHJcblxyXG4gIDxkeG8tZXhwb3J0IFtlbmFibGVkXT1cImVuYWJsZUV4cG9ydFwiIFtmb3JtYXRzXT1cIlsneGxzeCcsICdjc3YnXVwiPjwvZHhvLWV4cG9ydD5cclxuXHJcbiAgPGR4by1maWx0ZXItYnVpbGRlciBbY3VzdG9tT3BlcmF0aW9uc109XCJjdXN0b21PcGVyYXRpb25zXCI+IDwvZHhvLWZpbHRlci1idWlsZGVyPlxyXG4gIDxkeG8tZmlsdGVyLWJ1aWxkZXItcG9wdXAgW3Bvc2l0aW9uXT1cInBvcHVwUG9zaXRpb25cIj4gPC9keG8tZmlsdGVyLWJ1aWxkZXItcG9wdXA+XHJcblxyXG4gIDxkeG8tZmlsdGVyLXJvdyBbdmlzaWJsZV09XCJzaG93SGVhZGVyRmlsdGVyXCIgW2FwcGx5RmlsdGVyXT1cImN1cnJlbnRGaWx0ZXJcIj48L2R4by1maWx0ZXItcm93PlxyXG4gIDxkeG8taGVhZGVyLWZpbHRlciBbdmlzaWJsZV09XCJ0cnVlXCIgW2FsbG93U2VhcmNoXT1cImZhbHNlXCI+PC9keG8taGVhZGVyLWZpbHRlcj5cclxuICA8ZHhvLXNlbGVjdGlvbiBtb2RlPVwic2luZ2xlXCIgKm5nSWY9XCJ1cGRhdGVHcmlkPy5yb3dTZWxlY3Rpb25cIj48L2R4by1zZWxlY3Rpb24+XHJcbiAgPG5nLWNvbnRhaW5lciAqbmdGb3I9XCJsZXQgY29sdW1uIG9mIGNvbHVtbnM7IGxldCBpID0gaW5kZXhcIj5cclxuICAgIDxuZy1jb250YWluZXIgKm5nSWY9XCJjb2x1bW4/LmhpZGUgIT09IHRydWVcIj5cclxuICAgICAgPG5nLWNvbnRhaW5lciAqbmdJZj1cImNvbHVtbj8ubGluazsgZWxzZSBub0xpbmtcIj5cclxuICAgICAgICA8ZHhpLWNvbHVtblxyXG4gICAgICAgICAgW3Zpc2libGVdPVwiZ2V0VmlzYWJpbGl0eUJ5Q2hvb3NhYmxlUHJvcCh1cGRhdGVHcmlkPy5jaG9vc2VyLCBjb2x1bW4/LnZpc2libGUpXCJcclxuICAgICAgICAgIFthbGxvd0hpZGluZ109XCIhY29sdW1uPy5DaG9vc2FibGVcIlxyXG4gICAgICAgICAgW2ZpeGVkXT1cImNvbHVtbj8uZml4ZWRcIlxyXG4gICAgICAgICAgW2RhdGFGaWVsZF09XCJjb2x1bW4/LmNvbHVtbkRlZlwiXHJcbiAgICAgICAgICBbZmlsdGVyT3BlcmF0aW9uc109XCJjb2x1bW4/LmZpbHRlck9wZXJhdGlvbnMgPyBjb2x1bW4/LmZpbHRlck9wZXJhdGlvbnMgOiAnJ1wiXHJcbiAgICAgICAgICBbY2FwdGlvbl09XCJjb2x1bW4/LmhlYWRlclwiXHJcbiAgICAgICAgICBbYWxsb3dGaWx0ZXJpbmddPVwiY29sdW1uPy5maWx0ZXJcIlxyXG4gICAgICAgICAgY2VsbFRlbXBsYXRlPVwiY2VsbFRlbXBsYXRlXCJcclxuICAgICAgICAgIFthbGxvd1NvcnRpbmddPVwiY29sdW1uPy5zb3J0XCJcclxuICAgICAgICAgIFtzb3J0T3JkZXJdPVwiZ2V0U29ydE9yZGVyKHVwZGF0ZUdyaWQ/LmRlZmF1bHRTb3J0Q29sdW1uLCB1cGRhdGVHcmlkPy5kZWZhdWx0U29ydFR5cGUsIGNvbHVtbj8uY29sdW1uRGVmKVwiPlxyXG4gICAgICAgICAgPGR4by1oZWFkZXItZmlsdGVyIFtkYXRhU291cmNlXT1cImN1c3RvbWl6ZUhlYWRlckZpbHRlckRhdGFcIj48L2R4by1oZWFkZXItZmlsdGVyPlxyXG4gICAgICAgIDwvZHhpLWNvbHVtbj5cclxuICAgICAgPC9uZy1jb250YWluZXI+XHJcbiAgICAgIDxuZy10ZW1wbGF0ZSAjbm9MaW5rPlxyXG4gICAgICAgIDxuZy1jb250YWluZXIgKm5nSWY9XCJjb2x1bW4/Lmljb247IGVsc2Ugbm9JY29uXCI+XHJcbiAgICAgICAgICA8ZHhpLWNvbHVtblxyXG4gICAgICAgICAgICBbdmlzaWJsZV09XCJnZXRWaXNhYmlsaXR5QnlDaG9vc2FibGVQcm9wKHVwZGF0ZUdyaWQ/LmNob29zZXIsIGNvbHVtbj8udmlzaWJsZSlcIlxyXG4gICAgICAgICAgICBbYWxsb3dIaWRpbmddPVwiIWNvbHVtbj8uQ2hvb3NhYmxlXCJcclxuICAgICAgICAgICAgW2ZpeGVkXT1cImNvbHVtbj8uZml4ZWRcIlxyXG4gICAgICAgICAgICBbZGF0YUZpZWxkXT1cImNvbHVtbj8uY29sdW1uRGVmXCJcclxuICAgICAgICAgICAgW2NhcHRpb25dPVwiY29sdW1uPy5oZWFkZXJcIlxyXG4gICAgICAgICAgICBbYWxsb3dGaWx0ZXJpbmddPVwiY29sdW1uPy5maWx0ZXJcIlxyXG4gICAgICAgICAgICBbZmlsdGVyT3BlcmF0aW9uc109XCJjb2x1bW4/LmZpbHRlck9wZXJhdGlvbnMgPyBjb2x1bW4/LmZpbHRlck9wZXJhdGlvbnMgOiAnJ1wiXHJcbiAgICAgICAgICAgIGNlbGxUZW1wbGF0ZT1cImljb25UZW1wbGF0ZVwiXHJcbiAgICAgICAgICAgIFthbGxvd1NvcnRpbmddPVwiY29sdW1uPy5zb3J0XCJcclxuICAgICAgICAgICAgW3NvcnRPcmRlcl09XCJnZXRTb3J0T3JkZXIodXBkYXRlR3JpZD8uZGVmYXVsdFNvcnRDb2x1bW4sIHVwZGF0ZUdyaWQ/LmRlZmF1bHRTb3J0VHlwZSwgY29sdW1uPy5jb2x1bW5EZWYpXCI+XHJcbiAgICAgICAgICAgIDxkeG8taGVhZGVyLWZpbHRlciBbZGF0YVNvdXJjZV09XCJjdXN0b21pemVIZWFkZXJGaWx0ZXJEYXRhXCI+PC9keG8taGVhZGVyLWZpbHRlcj5cclxuICAgICAgICAgIDwvZHhpLWNvbHVtbj5cclxuICAgICAgICA8L25nLWNvbnRhaW5lcj5cclxuICAgICAgPC9uZy10ZW1wbGF0ZT5cclxuICAgICAgPG5nLXRlbXBsYXRlICNub0ljb24+XHJcbiAgICAgICAgPG5nLWNvbnRhaW5lciAqbmdJZj1cImNvbHVtbj8uZGF0ZUZvcm1hdDsgZWxzZSBub0RhdGVcIj5cclxuICAgICAgICAgIDxkeGktY29sdW1uXHJcbiAgICAgICAgICAgIFt2aXNpYmxlXT1cImdldFZpc2FiaWxpdHlCeUNob29zYWJsZVByb3AodXBkYXRlR3JpZD8uY2hvb3NlciwgY29sdW1uPy52aXNpYmxlKVwiXHJcbiAgICAgICAgICAgIFthbGxvd0hpZGluZ109XCIhY29sdW1uPy5DaG9vc2FibGVcIlxyXG4gICAgICAgICAgICBbZml4ZWRdPVwiY29sdW1uPy5maXhlZFwiXHJcbiAgICAgICAgICAgICpuZ0lmPVwiY29sdW1uPy5kYXRldGV4dCA9PT0gJ01NREQyNCdcIlxyXG4gICAgICAgICAgICBbZGF0YUZpZWxkXT1cImNvbHVtbj8uY29sdW1uRGVmXCJcclxuICAgICAgICAgICAgW2NhcHRpb25dPVwiY29sdW1uPy5oZWFkZXJcIlxyXG4gICAgICAgICAgICBbYWxsb3dGaWx0ZXJpbmddPVwiY29sdW1uPy5maWx0ZXJcIlxyXG4gICAgICAgICAgICBbZmlsdGVyT3BlcmF0aW9uc109XCJjb2x1bW4/LmZpbHRlck9wZXJhdGlvbnMgPyBjb2x1bW4/LmZpbHRlck9wZXJhdGlvbnMgOiAnJ1wiXHJcbiAgICAgICAgICAgIGRhdGFUeXBlPVwiZGF0ZVwiXHJcbiAgICAgICAgICAgIGZvcm1hdD1cIk1NL2RkL3l5eXksIEhIOm1tXCJcclxuICAgICAgICAgICAgW2FsbG93U29ydGluZ109XCJjb2x1bW4/LnNvcnRcIlxyXG4gICAgICAgICAgICBbc29ydE9yZGVyXT1cImdldFNvcnRPcmRlcih1cGRhdGVHcmlkPy5kZWZhdWx0U29ydENvbHVtbiwgdXBkYXRlR3JpZD8uZGVmYXVsdFNvcnRUeXBlLCBjb2x1bW4/LmNvbHVtbkRlZilcIj5cclxuICAgICAgICAgICAgPGR4by1oZWFkZXItZmlsdGVyIFtkYXRhU291cmNlXT1cImN1c3RvbWl6ZUhlYWRlckZpbHRlckRhdGFcIj48L2R4by1oZWFkZXItZmlsdGVyPlxyXG4gICAgICAgICAgPC9keGktY29sdW1uPlxyXG4gICAgICAgICAgPGR4aS1jb2x1bW5cclxuICAgICAgICAgICAgW3Zpc2libGVdPVwiZ2V0VmlzYWJpbGl0eUJ5Q2hvb3NhYmxlUHJvcCh1cGRhdGVHcmlkPy5jaG9vc2VyLCBjb2x1bW4/LnZpc2libGUpXCJcclxuICAgICAgICAgICAgW2FsbG93SGlkaW5nXT1cIiFjb2x1bW4/LkNob29zYWJsZVwiXHJcbiAgICAgICAgICAgIFtmaXhlZF09XCJjb2x1bW4/LmZpeGVkXCJcclxuICAgICAgICAgICAgKm5nSWY9XCJjb2x1bW4/LmRhdGV0ZXh0ID09PSAnTURZJ1wiXHJcbiAgICAgICAgICAgIFtmaWx0ZXJPcGVyYXRpb25zXT1cImNvbHVtbj8uZmlsdGVyT3BlcmF0aW9ucyA/IGNvbHVtbj8uZmlsdGVyT3BlcmF0aW9ucyA6ICcnXCJcclxuICAgICAgICAgICAgW2RhdGFGaWVsZF09XCJjb2x1bW4/LmNvbHVtbkRlZlwiXHJcbiAgICAgICAgICAgIFtjYXB0aW9uXT1cImNvbHVtbj8uaGVhZGVyXCJcclxuICAgICAgICAgICAgW2FsbG93RmlsdGVyaW5nXT1cImNvbHVtbj8uZmlsdGVyXCJcclxuICAgICAgICAgICAgZGF0YVR5cGU9XCJkYXRlXCJcclxuICAgICAgICAgICAgZm9ybWF0PVwiTU0vZGQveXl5eVwiXHJcbiAgICAgICAgICAgIFthbGxvd1NvcnRpbmddPVwiY29sdW1uPy5zb3J0XCJcclxuICAgICAgICAgICAgW3NvcnRPcmRlcl09XCJnZXRTb3J0T3JkZXIodXBkYXRlR3JpZD8uZGVmYXVsdFNvcnRDb2x1bW4sIHVwZGF0ZUdyaWQ/LmRlZmF1bHRTb3J0VHlwZSwgY29sdW1uPy5jb2x1bW5EZWYpXCI+XHJcbiAgICAgICAgICAgIDxkeG8taGVhZGVyLWZpbHRlciBbZGF0YVNvdXJjZV09XCJjdXN0b21pemVIZWFkZXJGaWx0ZXJEYXRhXCI+PC9keG8taGVhZGVyLWZpbHRlcj5cclxuICAgICAgICAgIDwvZHhpLWNvbHVtbj5cclxuICAgICAgICAgIDxkeGktY29sdW1uXHJcbiAgICAgICAgICAgIFt2aXNpYmxlXT1cImdldFZpc2FiaWxpdHlCeUNob29zYWJsZVByb3AodXBkYXRlR3JpZD8uY2hvb3NlciwgY29sdW1uPy52aXNpYmxlKVwiXHJcbiAgICAgICAgICAgIFthbGxvd0hpZGluZ109XCIhY29sdW1uPy5DaG9vc2FibGVcIlxyXG4gICAgICAgICAgICBbZml4ZWRdPVwiY29sdW1uPy5maXhlZFwiXHJcbiAgICAgICAgICAgICpuZ0lmPVwiY29sdW1uPy5kYXRldGV4dCAhPT0gJ01EWScgJiYgY29sdW1uPy5kYXRldGV4dCAhPT0gJ01NREQyNCdcIlxyXG4gICAgICAgICAgICBbZGF0YUZpZWxkXT1cImNvbHVtbj8uY29sdW1uRGVmXCJcclxuICAgICAgICAgICAgW2ZpbHRlck9wZXJhdGlvbnNdPVwiY29sdW1uPy5maWx0ZXJPcGVyYXRpb25zID8gY29sdW1uPy5maWx0ZXJPcGVyYXRpb25zIDogJydcIlxyXG4gICAgICAgICAgICBbY2FwdGlvbl09XCJjb2x1bW4/LmhlYWRlclwiXHJcbiAgICAgICAgICAgIFthbGxvd0ZpbHRlcmluZ109XCJjb2x1bW4/LmZpbHRlclwiXHJcbiAgICAgICAgICAgIGRhdGFUeXBlPVwiZGF0ZVwiXHJcbiAgICAgICAgICAgIFtmb3JtYXRdPVwiY29sdW1uPy5yZW1vdmVUaW1lID8gJ01NL2RkL3l5eXknIDogJ01NL2RkL3l5eXksIGhoOm1tIGEnXCJcclxuICAgICAgICAgICAgW2FsbG93U29ydGluZ109XCJjb2x1bW4/LnNvcnRcIlxyXG4gICAgICAgICAgICBbc29ydE9yZGVyXT1cImdldFNvcnRPcmRlcih1cGRhdGVHcmlkPy5kZWZhdWx0U29ydENvbHVtbiwgdXBkYXRlR3JpZD8uZGVmYXVsdFNvcnRUeXBlLCBjb2x1bW4/LmNvbHVtbkRlZilcIj5cclxuICAgICAgICAgICAgPGR4by1oZWFkZXItZmlsdGVyIFtkYXRhU291cmNlXT1cImN1c3RvbWl6ZUhlYWRlckZpbHRlckRhdGFcIj48L2R4by1oZWFkZXItZmlsdGVyPlxyXG4gICAgICAgICAgPC9keGktY29sdW1uPlxyXG4gICAgICAgIDwvbmctY29udGFpbmVyPlxyXG4gICAgICA8L25nLXRlbXBsYXRlPlxyXG4gICAgICA8bmctdGVtcGxhdGUgI25vRGF0ZT5cclxuICAgICAgICA8ZHhpLWNvbHVtblxyXG4gICAgICAgICAgW2RhdGFGaWVsZF09XCJjb2x1bW4uY29sdW1uRGVmXCJcclxuICAgICAgICAgIFtjYXB0aW9uXT1cImNvbHVtbi5oZWFkZXJcIlxyXG4gICAgICAgICAgW2ZpbHRlck9wZXJhdGlvbnNdPVwiY29sdW1uPy5maWx0ZXJPcGVyYXRpb25zID8gY29sdW1uPy5maWx0ZXJPcGVyYXRpb25zIDogJydcIlxyXG4gICAgICAgICAgW2FsbG93RmlsdGVyaW5nXT1cImNvbHVtbi5maWx0ZXJcIj5cclxuICAgICAgICAgIDxkeG8taGVhZGVyLWZpbHRlciBbZGF0YVNvdXJjZV09XCJjdXN0b21pemVIZWFkZXJGaWx0ZXJEYXRhXCI+PC9keG8taGVhZGVyLWZpbHRlcj5cclxuICAgICAgICA8L2R4aS1jb2x1bW4+XHJcbiAgICAgICAgPG5nLWNvbnRhaW5lciAqbmdJZj1cImNvbHVtbj8uaGVhZGVyLnRvTG93ZXJDYXNlKCkudHJpbSgpID09PSAnc3RhdHVzJztcIj5cclxuICAgICAgICAgIDxkeGktY29sdW1uXHJcbiAgICAgICAgICAgIFt2aXNpYmxlXT1cImdldFZpc2FiaWxpdHlCeUNob29zYWJsZVByb3AodXBkYXRlR3JpZD8uY2hvb3NlciwgY29sdW1uPy52aXNpYmxlKVwiXHJcbiAgICAgICAgICAgIFthbGxvd0hpZGluZ109XCIhY29sdW1uPy5DaG9vc2FibGVcIlxyXG4gICAgICAgICAgICBbZml4ZWRdPVwiY29sdW1uPy5maXhlZFwiXHJcbiAgICAgICAgICAgIFtkYXRhRmllbGRdPVwiY29sdW1uPy5jb2x1bW5EZWZcIlxyXG4gICAgICAgICAgICBbZmlsdGVyT3BlcmF0aW9uc109XCJjb2x1bW4/LmZpbHRlck9wZXJhdGlvbnMgPyBjb2x1bW4/LmZpbHRlck9wZXJhdGlvbnMgOiAnJ1wiXHJcbiAgICAgICAgICAgIFtjYXB0aW9uXT1cImNvbHVtbj8uaGVhZGVyXCJcclxuICAgICAgICAgICAgW2FsbG93RmlsdGVyaW5nXT1cImNvbHVtbj8uZmlsdGVyXCJcclxuICAgICAgICAgICAgY2VsbFRlbXBsYXRlPVwic3RhdHVzVGVtcGxhdGVcIlxyXG4gICAgICAgICAgICBbYWxsb3dTb3J0aW5nXT1cImNvbHVtbj8uc29ydFwiXHJcbiAgICAgICAgICAgIFtzb3J0T3JkZXJdPVwiZ2V0U29ydE9yZGVyKHVwZGF0ZUdyaWQ/LmRlZmF1bHRTb3J0Q29sdW1uLCB1cGRhdGVHcmlkPy5kZWZhdWx0U29ydFR5cGUsIGNvbHVtbj8uY29sdW1uRGVmKVwiPlxyXG4gICAgICAgICAgICA8ZHhvLWhlYWRlci1maWx0ZXIgW2RhdGFTb3VyY2VdPVwiY3VzdG9taXplSGVhZGVyRmlsdGVyRGF0YVwiPjwvZHhvLWhlYWRlci1maWx0ZXI+XHJcbiAgICAgICAgICA8L2R4aS1jb2x1bW4+XHJcbiAgICAgICAgPC9uZy1jb250YWluZXI+XHJcbiAgICAgIDwvbmctdGVtcGxhdGU+XHJcbiAgICA8L25nLWNvbnRhaW5lcj5cclxuICA8L25nLWNvbnRhaW5lcj5cclxuICA8bmctY29udGFpbmVyXHJcbiAgICAqbmdJZj1cIlxyXG4gICAgICB1cGRhdGVHcmlkICYmXHJcbiAgICAgICh1cGRhdGVHcmlkPy5leHRlcm5hbExpbmsgfHxcclxuICAgICAgICB1cGRhdGVHcmlkPy5vcGVuUG9wdXAgfHxcclxuICAgICAgICB1cGRhdGVHcmlkPy5lZGl0IHx8XHJcbiAgICAgICAgdXBkYXRlR3JpZD8uZWRpdE15QXBwbGljYXRpb24gfHxcclxuICAgICAgICB1cGRhdGVHcmlkPy5lZGl0QXBwZWFsIHx8XHJcbiAgICAgICAgdXBkYXRlR3JpZD8uZWRpdEJpbGxpbmcgfHxcclxuICAgICAgICB1cGRhdGVHcmlkPy5kZWxldGUgfHxcclxuICAgICAgICB1cGRhdGVHcmlkPy5kZWxldGUgfHxcclxuICAgICAgICB1cGRhdGVHcmlkPy5kb3dubG9hZCB8fFxyXG4gICAgICAgIHVwZGF0ZUdyaWQ/LnNob3dEb3dubG9hZCB8fFxyXG4gICAgICAgIHVwZGF0ZUdyaWQ/LnNob3dEZWxldGUgfHxcclxuICAgICAgICB1cGRhdGVHcmlkPy5wZGYpXHJcbiAgICBcIj5cclxuICAgIDxkeGktY29sdW1uXHJcbiAgICAgIFt3aWR0aF09XCIxMDBcIlxyXG4gICAgICBbYWxsb3dGaWx0ZXJpbmddPVwiZmFsc2VcIlxyXG4gICAgICBbYWxsb3dTb3J0aW5nXT1cImZhbHNlXCJcclxuICAgICAgY2FwdGlvbj1cIkFjdGlvblwiXHJcbiAgICAgIGNlbGxUZW1wbGF0ZT1cImVkaXRDZWxsVGVtcGxhdGVcIj48L2R4aS1jb2x1bW4+XHJcbiAgICA8IS0tIEFjdGlvbiBsYWJlbCBhZGRlZCBmb3IgYWRtaW4gZ3JpZCAtLT5cclxuXHJcbiAgICA8ZGl2ICpkeFRlbXBsYXRlPVwibGV0IGQgb2YgJ2VkaXRDZWxsVGVtcGxhdGUnXCI+XHJcbiAgICAgIDxhXHJcbiAgICAgICAgaHJlZj1cImphdmFzY3JpcHQ6dm9pZCgwKVwiXHJcbiAgICAgICAgKm5nSWY9XCJ1cGRhdGVHcmlkPy5leHRlcm5hbExpbmtcIlxyXG4gICAgICAgIGNsYXNzPVwibm8tYmdcIlxyXG4gICAgICAgIG1hdFRvb2x0aXA9XCJPcGVuXCJcclxuICAgICAgICAoY2xpY2spPVwib3BlbkxpbmsoZClcIj5cclxuICAgICAgICA8ZW0gY2xhc3M9XCJmYSBmYS1leHRlcm5hbC1saW5rXCIgYXJpYS1oaWRkZW49XCJ0cnVlXCI+PC9lbT5cclxuICAgICAgPC9hPlxyXG4gICAgICA8YVxyXG4gICAgICAgIGhyZWY9XCJqYXZhc2NyaXB0OnZvaWQoMClcIlxyXG4gICAgICAgIHRpdGxlPVwiQXBwZWFsXCJcclxuICAgICAgICAqbmdJZj1cInVwZGF0ZUdyaWQ/LmFwcGVhbFwiXHJcbiAgICAgICAgY2xhc3M9XCJuby1iZ1wiXHJcbiAgICAgICAgbWF0VG9vbHRpcD1cIkFwcGVhbFwiXHJcbiAgICAgICAgKGNsaWNrKT1cIm5hdmlnYXRlVG8oZClcIj5cclxuICAgICAgICA8ZW0gY2xhc3M9XCJmYSBmYS1leHRlcm5hbC1saW5rXCIgYXJpYS1oaWRkZW49XCJ0cnVlXCI+PC9lbT5cclxuICAgICAgPC9hPlxyXG4gICAgICA8YVxyXG4gICAgICAgIGhyZWY9XCJqYXZhc2NyaXB0OnZvaWQoMClcIlxyXG4gICAgICAgICpuZ0lmPVwidXBkYXRlR3JpZD8uc2hvd0Rvd25sb2FkICYmICF1cGRhdGVHcmlkPy5pc05ld2x5VXBsb2FkZWRcIlxyXG4gICAgICAgIGNsYXNzPVwibm8tYmdcIlxyXG4gICAgICAgIG1hdFRvb2x0aXA9XCJEb3dubG9hZCBGaWxlXCJcclxuICAgICAgICAoY2xpY2spPVwiZG93bmxvYWRGb3JtUmVzcG9uc2VBdHRhY2htZW50cyhkKVwiPlxyXG4gICAgICAgIDxlbSBjbGFzcz1cImZhIGZhLWRvd25sb2FkXCIgYXJpYS1oaWRkZW49XCJ0cnVlXCI+PC9lbT4gPC9hXHJcbiAgICAgID4mbmJzcDsmbmJzcDtcclxuICAgICAgPGFcclxuICAgICAgICBocmVmPVwiamF2YXNjcmlwdDp2b2lkKDApXCJcclxuICAgICAgICAqbmdJZj1cInVwZGF0ZUdyaWQ/LnNob3dEZWxldGVcIlxyXG4gICAgICAgIGNsYXNzPVwibm8tYmcgdGV4dC1kYW5nZXJcIlxyXG4gICAgICAgIG1hdFRvb2x0aXA9XCJEZWxldGUgRmlsZVwiXHJcbiAgICAgICAgKGNsaWNrKT1cImRlbGV0ZUZvcm1SZXNwb25zZUF0dGFjaG1lbnRzKGQpXCI+XHJcbiAgICAgICAgPGVtIGNsYXNzPVwiZmEgZmEtdHJhc2hcIiBhcmlhLWhpZGRlbj1cInRydWVcIj48L2VtPlxyXG4gICAgICA8L2E+XHJcbiAgICAgIDxhXHJcbiAgICAgICAgaHJlZj1cImphdmFzY3JpcHQ6dm9pZCgwKVwiXHJcbiAgICAgICAgKm5nSWY9XCJ1cGRhdGVHcmlkPy5vcGVuUG9wdXBcIlxyXG4gICAgICAgIGNsYXNzPVwibm8tYmdcIlxyXG4gICAgICAgIG1hdFRvb2x0aXA9XCJPcGVuXCJcclxuICAgICAgICAoY2xpY2spPVwib3BlblBvcHVwTGluayhkKVwiPlxyXG4gICAgICAgIDxlbSBjbGFzcz1cImZhIGZhLW5ld3NwYXBlci1vXCIgYXJpYS1oaWRkZW49XCJ0cnVlXCI+PC9lbT5cclxuICAgICAgPC9hPlxyXG4gICAgICA8YVxyXG4gICAgICAgIGhyZWY9XCJqYXZhc2NyaXB0OnZvaWQoMClcIlxyXG4gICAgICAgICpuZ0lmPVwidXBkYXRlR3JpZD8uZHVwbGljYXRlXCJcclxuICAgICAgICBjbGFzcz1cIm5vLWJnIG1yLTJcIlxyXG4gICAgICAgIG1hdFRvb2x0aXA9XCJDb3B5XCJcclxuICAgICAgICAoY2xpY2spPVwiZHVwbGljYXRlRGF0ZShkKVwiPlxyXG4gICAgICAgIDxlbSBjbGFzcz1cImZhIGZhLWNvcHlcIiBhcmlhLWhpZGRlbj1cInRydWVcIiBmaWVsZEtleT1cIlBBR19ERVNfR1JJRF9MSVNUX0NPUFlcIlxyXG4gICAgICAgICAgPjxzcGFuIGNsYXNzPVwic3Itb25seVwiPkNvcHk8L3NwYW4+PC9lbVxyXG4gICAgICAgID5cclxuICAgICAgPC9hPlxyXG4gICAgICA8YVxyXG4gICAgICAgIGhyZWY9XCJqYXZhc2NyaXB0OnZvaWQoMClcIlxyXG4gICAgICAgICpuZ0lmPVwidXBkYXRlR3JpZD8uZG93bmxvYWRcIlxyXG4gICAgICAgIGNsYXNzPVwibm8tYmdcIlxyXG4gICAgICAgIG1hdFRvb2x0aXA9XCJEb3dubG9hZFwiXHJcbiAgICAgICAgKGNsaWNrKT1cImRvd25sb2FkRGF0YShkKVwiPlxyXG4gICAgICAgIDxlbSBjbGFzcz1cImZhIGZhLWRvd25sb2FkXCIgYXJpYS1oaWRkZW49XCJ0cnVlXCI+PC9lbT5cclxuICAgICAgPC9hPlxyXG4gICAgICA8YVxyXG4gICAgICAgIGhyZWY9XCJqYXZhc2NyaXB0OnZvaWQoMClcIlxyXG4gICAgICAgIHRpdGxlPVwiRWRpdFwiXHJcbiAgICAgICAgKm5nSWY9XCJ1cGRhdGVHcmlkPy5lZGl0ICYmICFkLmRhdGE/LmV4dGVuZGVkUHJvcHM/Lm91dGNvbWVcIlxyXG4gICAgICAgIGNsYXNzPVwibm8tYmcgbXItMlwiXHJcbiAgICAgICAgbWF0VG9vbHRpcD1cIkVkaXRcIlxyXG4gICAgICAgIChjbGljayk9XCJlZGl0RGF0YShkKVwiPlxyXG4gICAgICAgIDxlbSBjbGFzcz1cImZhIGZhLXBlbmNpbFwiIHRpdGxlPVwiRWRpdFwiIGFyaWEtaGlkZGVuPVwidHJ1ZVwiIHN0eWxlPVwiZm9udC1zaXplOiAxM3B4XCI+PC9lbT5cclxuICAgICAgPC9hPlxyXG4gICAgICA8YVxyXG4gICAgICAgIGhyZWY9XCJqYXZhc2NyaXB0OnZvaWQoMClcIlxyXG4gICAgICAgIHRpdGxlPVwiRWRpdFwiXHJcbiAgICAgICAgKm5nSWY9XCJ1cGRhdGVHcmlkPy5lZGl0TXlBcHBsaWNhdGlvbiAmJiBkPy5kYXRhPy5hcHBsaWNhdGlvbl9zdGF0dXMgPT09ICdJbiBQcm9ncmVzcydcIlxyXG4gICAgICAgIGNsYXNzPVwibm8tYmcgbXItMlwiXHJcbiAgICAgICAgbWF0VG9vbHRpcD1cIkVkaXRcIlxyXG4gICAgICAgIChjbGljayk9XCJlZGl0RGF0YU15QXBwbGNpYXRpb24oZClcIj5cclxuICAgICAgICA8ZW0gY2xhc3M9XCJmYSBmYS1wZW5jaWxcIiB0aXRsZT1cIkVkaXRcIiBhcmlhLWhpZGRlbj1cInRydWVcIiBzdHlsZT1cImZvbnQtc2l6ZTogMTNweFwiPjwvZW0+XHJcbiAgICAgIDwvYT5cclxuICAgICAgPGFcclxuICAgICAgICBocmVmPVwiamF2YXNjcmlwdDp2b2lkKDApXCJcclxuICAgICAgICB0aXRsZT1cIkVkaXRcIlxyXG4gICAgICAgICpuZ0lmPVwidXBkYXRlR3JpZD8uZWRpdEFwcGVhbCAmJiBkPy5kYXRhPy5zdGF0dXMgPT09ICdJbiBQcm9ncmVzcydcIlxyXG4gICAgICAgIGNsYXNzPVwibm8tYmcgbXItMlwiXHJcbiAgICAgICAgbWF0VG9vbHRpcD1cIkVkaXRcIlxyXG4gICAgICAgIChjbGljayk9XCJlZGl0QXBwZWFsKGQpXCI+XHJcbiAgICAgICAgPGVtIGNsYXNzPVwiZmEgZmEtcGVuY2lsXCIgdGl0bGU9XCJFZGl0XCIgYXJpYS1oaWRkZW49XCJ0cnVlXCIgc3R5bGU9XCJmb250LXNpemU6IDEzcHhcIj48L2VtPlxyXG4gICAgICA8L2E+XHJcbiAgICAgIDxhXHJcbiAgICAgICAgaHJlZj1cImphdmFzY3JpcHQ6dm9pZCgwKVwiXHJcbiAgICAgICAgdGl0bGU9XCJFZGl0XCJcclxuICAgICAgICAqbmdJZj1cInVwZGF0ZUdyaWQ/LmVkaXRCaWxsaW5nICYmIGQ/LmRhdGE/LnN0YXR1cyA9PT0gJ1dhaXRpbmcgZm9yIGFwcHJvdmFsJ1wiXHJcbiAgICAgICAgY2xhc3M9XCJuby1iZyBtci0yXCJcclxuICAgICAgICBtYXRUb29sdGlwPVwiRWRpdFwiXHJcbiAgICAgICAgKGNsaWNrKT1cImVkaXRBcHBlYWwoZClcIj5cclxuICAgICAgICA8ZW0gY2xhc3M9XCJmYSBmYS1wZW5jaWxcIiB0aXRsZT1cIkVkaXRcIiBhcmlhLWhpZGRlbj1cInRydWVcIiBzdHlsZT1cImZvbnQtc2l6ZTogMTNweFwiPjwvZW0+XHJcbiAgICAgIDwvYT5cclxuICAgICAgPGFcclxuICAgICAgICBocmVmPVwiamF2YXNjcmlwdDp2b2lkKDApXCJcclxuICAgICAgICB0aXRsZT1cIlZpZXdcIlxyXG4gICAgICAgICpuZ0lmPVwidXBkYXRlR3JpZD8udmlld1wiXHJcbiAgICAgICAgY2xhc3M9XCJuby1iZyBtci0yXCJcclxuICAgICAgICBtYXRUb29sdGlwPVwiVmlld1wiXHJcbiAgICAgICAgKGNsaWNrKT1cInZpZXdEYXRhKGQpXCI+XHJcbiAgICAgICAgPGVtIGNsYXNzPVwiZmEgZmEtZXllXCIgdGl0bGU9XCJWaWV3XCIgYXJpYS1oaWRkZW49XCJ0cnVlXCI+PC9lbT5cclxuICAgICAgPC9hPlxyXG4gICAgICA8YVxyXG4gICAgICAgIGhyZWY9XCJqYXZhc2NyaXB0OnZvaWQoMClcIlxyXG4gICAgICAgIHRpdGxlPVwiZGVsZXRlXCJcclxuICAgICAgICAqbmdJZj1cInVwZGF0ZUdyaWQ/LmRlbGV0ZVwiXHJcbiAgICAgICAgY2xhc3M9XCJuby1iZyB0ZXh0LWRhbmdlclwiXHJcbiAgICAgICAgbWF0VG9vbHRpcD1cIkRlbGV0ZVwiXHJcbiAgICAgICAgKGNsaWNrKT1cImRlbGV0ZURhdGEoZClcIj5cclxuICAgICAgICA8ZW0gY2xhc3M9XCJmYSBmYS10cmFzaFwiIGFyaWEtaGlkZGVuPVwidHJ1ZVwiPjwvZW0+XHJcbiAgICAgIDwvYT5cclxuICAgICAgPGFcclxuICAgICAgICBocmVmPVwiamF2YXNjcmlwdDp2b2lkKDApXCJcclxuICAgICAgICAqbmdJZj1cInVwZGF0ZUdyaWQ/Lm91dGNvbWUgJiYgZC5kYXRhPy5leHRlbmRlZFByb3BzPy5vdXRjb21lXCJcclxuICAgICAgICBjbGFzcz1cIm5vLWJnXCJcclxuICAgICAgICBtYXRUb29sdGlwPVwiVmlld1wiXHJcbiAgICAgICAgKGNsaWNrKT1cIm91dENvbWVEYXRhKGQpXCI+XHJcbiAgICAgICAgPGVtIGNsYXNzPVwiZmEgZmEtZXllXCIgdGl0bGU9XCJWaWV3XCIgYXJpYS1oaWRkZW49XCJ0cnVlXCI+PC9lbT5cclxuICAgICAgPC9hPlxyXG4gICAgICA8YSBocmVmPVwiamF2YXNjcmlwdDp2b2lkKDApXCIgdGl0bGU9XCJwZGZcIiAqbmdJZj1cInVwZGF0ZUdyaWQ/LnBkZlwiIGNsYXNzPVwibm8tYmdcIiBtYXRUb29sdGlwPVwiUERGXCI+XHJcbiAgICAgICAgPGVtIGNsYXNzPVwiZmEgZmEtZmlsZS1wZGYtb1wiIGFyaWEtaGlkZGVuPVwidHJ1ZVwiPjwvZW0+XHJcbiAgICAgIDwvYT5cclxuICAgICAgPGJ1dHRvblxyXG4gICAgICAgICpuZ0lmPVwidXBkYXRlR3JpZD8udG9nZ2xlXCJcclxuICAgICAgICBjbGFzcz1cIm5vLWJnXCJcclxuICAgICAgICBbbWF0VG9vbHRpcF09XCJkLmRhdGEuaXNhY3RpdmUgPT09IHRydWUgPyAnRGVhY3RpdmF0ZScgOiAnQWN0aXZhdGUnXCJcclxuICAgICAgICAoY2xpY2spPVwiYWN0aXZlVXNlcihkKVwiPlxyXG4gICAgICAgIDxlbSAqbmdJZj1cInVwZGF0ZUdyaWQ/LnRvZ2dsZSAmJiBkLmRhdGEuaXNhY3RpdmUgPT09IHRydWVcIiBjbGFzcz1cImZhIGZhLXRvZ2dsZS1vblwiPjwvZW0+XHJcbiAgICAgICAgPGVtICpuZ0lmPVwidXBkYXRlR3JpZD8udG9nZ2xlICYmIGQuZGF0YS5pc2FjdGl2ZSA9PT0gZmFsc2VcIiBjbGFzcz1cImZhIGZhLXRvZ2dsZS1vZmZcIj48L2VtPlxyXG4gICAgICA8L2J1dHRvbj5cclxuICAgICAgPGJ1dHRvbiAqbmdJZj1cInVwZGF0ZUdyaWQ/LmFjdGl2ZW9yZGVhY3RpdmVcIiBjbGFzcz1cIm5vLWJnXCIgKGNsaWNrKT1cImRlbGV0ZURhdGEoZClcIj5cclxuICAgICAgICA8ZW0gKm5nSWY9XCJ1cGRhdGVHcmlkPy5hY3RpdmVvcmRlYWN0aXZlICYmIGQuZGF0YS5hY3RpdmVmbGFnID09PSAxXCIgY2xhc3M9XCJmYSBmYS10b2dnbGUtb25cIj48L2VtPlxyXG4gICAgICAgIDxlbSAqbmdJZj1cInVwZGF0ZUdyaWQ/LmFjdGl2ZW9yZGVhY3RpdmUgJiYgZC5kYXRhLmFjdGl2ZWZsYWcgPT09IDBcIiBjbGFzcz1cImZhIGZhLXRvZ2dsZS1vZmZcIj48L2VtPlxyXG4gICAgICA8L2J1dHRvbj5cclxuICAgIDwvZGl2PlxyXG4gIDwvbmctY29udGFpbmVyPlxyXG4gIDxkaXYgKmR4VGVtcGxhdGU9XCJsZXQgZCBvZiAnY2VsbFRlbXBsYXRlJ1wiPlxyXG4gICAgPGEgaHJlZj1cImphdmFzY3JpcHQ6dm9pZCgwKVwiICpuZ0lmPVwiZC52YWx1ZSAmJiBkLnZhbHVlICE9PSAnbnVsbCdcIiAoY2xpY2spPVwiZ2V0Um91dGVyKGQpXCI+e3tcclxuICAgICAgZC52YWx1ZSAhPT0gJ251bGwnID8gZC52YWx1ZSA6ICcnXHJcbiAgICB9fTwvYT5cclxuICA8L2Rpdj5cclxuICA8ZGl2ICpkeFRlbXBsYXRlPVwibGV0IGQgb2YgJ2ljb25UZW1wbGF0ZSdcIj5cclxuICAgIDxlbSBjbGFzcz1cImZhIGZhLWJvb2tcIiAoY2xpY2spPVwicG9wdXAoZC52YWx1ZSlcIiBhcmlhLWhpZGRlbj1cInRydWVcIj48L2VtPlxyXG4gIDwvZGl2PlxyXG48L2R4LWRhdGEtZ3JpZD5cclxuPCEtLSA8bmctdGVtcGxhdGUgI2NhbGxOYXJyYXRpdmVQb3B1cD5cclxuICA8aDIgbWF0RGlhbG9nVGl0bGU+TmFycmF0aXZlPC9oMj5cclxuICA8ZGl2IFtpbm5lckhUTUxdPVwibmFycmF0aXZlRGF0YVwiPjwvZGl2PlxyXG4gIDxkaXYgY2xhc3M9XCJ0ZXh0LXJpZ2h0XCI+XHJcbiAgICA8YnV0dG9uIG1hdC1idXR0b24gKGNsaWNrKT1cImNsb3NlTmFycmF0aXZlUG9wdXAoKVwiIGNsYXNzPVwiYnRuIGJ0bi1jYW5jZWwgbXItMlwiPkNsb3NlPC9idXR0b24+XHJcbiAgPC9kaXY+XHJcbjwvbmctdGVtcGxhdGU+IC0tPlxyXG4iXX0=